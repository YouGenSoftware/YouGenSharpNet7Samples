/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202757 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Free Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use for evaluation purposes only. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using XE_HR_BackEndSqlEntities.Entities;
namespace XE_HR_BackEndDatabaseClient;
public partial class XE_HR_Context : DbContext
{
    public XE_HR_Context()
    {
    }
    public XE_HR_Context(DbContextOptions<XE_HR_Context> options) : base(options)
    {
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
    }
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    //DbSets
	public virtual DbSet<XE_HR_COUNTRIES>?XE_HR_COUNTRIES { get; set; }
	public virtual DbSet<XE_HR_DEPARTMENTS>?XE_HR_DEPARTMENTS { get; set; }
	public virtual DbSet<XE_HR_EMPLOYEES>?XE_HR_EMPLOYEES { get; set; }
	public virtual DbSet<XE_HR_JOB_HISTORY>?XE_HR_JOB_HISTORY { get; set; }
	public virtual DbSet<XE_HR_JOBS>?XE_HR_JOBS { get; set; }
	public virtual DbSet<XE_HR_LOCATIONS>?XE_HR_LOCATIONS { get; set; }
	public virtual DbSet<XE_HR_REGIONS>?XE_HR_REGIONS { get; set; }
	public virtual DbSet<XE_HR_EMP_DETAILS_VIEW>?XE_HR_EMP_DETAILS_VIEW { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
		modelBuilder.Entity<XE_HR_COUNTRIES>(entity =>
		{
			entity.ToTable("COUNTRIES", "HR", e => e.HasComment("country table. Contains 25 rows. References with locations table."));
			entity.HasKey(e => new { e.COUNTRY_ID })
				.HasName("COUNTRY_C_ID_PK");
			entity.HasIndex(e => new { e.COUNTRY_ID }, "COUNTRY_C_ID_PK")
				.IsUnique();
			entity.Property(e => e.COUNTRY_ID)
				.HasColumnName("COUNTRY_ID")
				.HasColumnType("CHAR")
				.HasMaxLength(2)
				.HasComment("Primary key of countries table.");
			entity.Property(e => e.COUNTRY_NAME)
				.HasColumnName("COUNTRY_NAME")
				.HasColumnType("VARCHAR2")
				.HasComment("Country name");
			entity.Property(e => e.REGION_ID)
				.HasColumnName("REGION_ID")
				.HasColumnType("NUMBER")
				.HasComment("Region ID for the country. Foreign key to region_id column in the departments table.");
			entity.HasOne(d => d.COUNTR_REG_FK_Ref)
				.WithMany(p => p.COUNTR_REG_FK_RefBy)
				.HasForeignKey(d => new { d.REGION_ID })
				.HasConstraintName("COUNTR_REG_FK_Ref");
		});
		modelBuilder.Entity<XE_HR_DEPARTMENTS>(entity =>
		{
			entity.ToTable("DEPARTMENTS", "HR", e => e.HasComment("Departments table that shows details of departments where employees work. Contains 27 rows; references with locations, employees, and job_history tables."));
			entity.HasKey(e => new { e.DEPARTMENT_ID })
				.HasName("DEPT_ID_PK");
			entity.HasIndex(e => new { e.DEPARTMENT_ID }, "DEPT_ID_PK")
				.IsUnique();
			entity.HasIndex(e => new { e.LOCATION_ID }, "DEPT_LOCATION_IX");
			entity.Property(e => e.DEPARTMENT_ID)
				.HasColumnName("DEPARTMENT_ID")
				.HasColumnType("NUMBER")
				.HasComment("Primary key column of departments table.");
			entity.Property(e => e.DEPARTMENT_NAME)
				.HasColumnName("DEPARTMENT_NAME")
				.HasColumnType("VARCHAR2")
				.HasComment("A not null column that shows name of a department. Administration, Marketing, Purchasing, Human Resources, Shipping, IT, Executive, Public Relations, Sales, Finance, and Accounting. ");
			entity.Property(e => e.MANAGER_ID)
				.HasColumnName("MANAGER_ID")
				.HasColumnType("NUMBER")
				.HasComment("Manager_id of a department. Foreign key to employee_id column of employees table. The manager_id column of the employee table references this column.");
			entity.Property(e => e.LOCATION_ID)
				.HasColumnName("LOCATION_ID")
				.HasColumnType("NUMBER")
				.HasComment("Location id where a department is located. Foreign key to location_id column of locations table.");
			entity.HasOne(d => d.DEPT_LOC_FK_Ref)
				.WithMany(p => p.DEPT_LOC_FK_RefBy)
				.HasForeignKey(d => new { d.LOCATION_ID })
				.HasConstraintName("DEPT_LOC_FK_Ref");
			entity.HasOne(d => d.DEPT_MGR_FK_Ref)
				.WithMany(p => p.DEPT_MGR_FK_RefBy)
				.HasForeignKey(d => new { d.MANAGER_ID })
				.HasConstraintName("DEPT_MGR_FK_Ref");
		});
		modelBuilder.Entity<XE_HR_EMPLOYEES>(entity =>
		{
			entity.ToTable("EMPLOYEES", "HR", e => e.HasComment("employees table. Contains 107 rows. References with departments, jobs, job_history tables. Contains a self reference."));
			entity.HasKey(e => new { e.EMPLOYEE_ID })
				.HasName("EMP_EMP_ID_PK");
			entity.HasIndex(e => new { e.FIRST_NAME, e.LAST_NAME }, "EMP_NAME_IX");
			entity.HasIndex(e => new { e.DEPARTMENT_ID }, "EMP_DEPARTMENT_IX");
			entity.HasIndex(e => new { e.EMAIL }, "EMP_EMAIL_UK")
				.IsUnique();
			entity.HasIndex(e => new { e.EMPLOYEE_ID }, "EMP_EMP_ID_PK")
				.IsUnique();
			entity.HasIndex(e => new { e.JOB_ID }, "EMP_JOB_IX");
			entity.HasIndex(e => new { e.MANAGER_ID }, "EMP_MANAGER_IX");
			entity.Property(e => e.EMPLOYEE_ID)
				.HasColumnName("EMPLOYEE_ID")
				.HasColumnType("NUMBER")
				.HasComment("Primary key of employees table.");
			entity.Property(e => e.FIRST_NAME)
				.HasColumnName("FIRST_NAME")
				.HasColumnType("VARCHAR2")
				.HasComment("First name of the employee. A not null column.");
			entity.Property(e => e.LAST_NAME)
				.HasColumnName("LAST_NAME")
				.HasColumnType("VARCHAR2")
				.HasComment("Last name of the employee. A not null column.");
			entity.Property(e => e.EMAIL)
				.HasColumnName("EMAIL")
				.HasColumnType("VARCHAR2")
				.HasComment("Email id of the employee");
			entity.Property(e => e.PHONE_NUMBER)
				.HasColumnName("PHONE_NUMBER")
				.HasColumnType("VARCHAR2")
				.HasComment("Phone number of the employee; includes country code and area code");
			entity.Property(e => e.HIRE_DATE)
				.HasColumnName("HIRE_DATE")
				.HasColumnType("DATE(7)")
				.HasComment("Date when the employee started on this job. A not null column.");
			entity.Property(e => e.JOB_ID)
				.HasColumnName("JOB_ID")
				.HasColumnType("VARCHAR2")
				.HasComment("Current job of the employee; foreign key to job_id column of the jobs table. A not null column.");
			entity.Property(e => e.SALARY)
				.HasColumnName("SALARY")
				.HasColumnType("NUMBER")
				.HasComment("Monthly salary of the employee. Must be greater than zero (enforced by constraint emp_salary_min)");
			entity.Property(e => e.COMMISSION_PCT)
				.HasColumnName("COMMISSION_PCT")
				.HasColumnType("NUMBER")
				.HasComment("Commission percentage of the employee; Only employees in sales department elgible for commission percentage");
			entity.Property(e => e.MANAGER_ID)
				.HasColumnName("MANAGER_ID")
				.HasColumnType("NUMBER")
				.HasComment("Manager id of the employee; has same domain as manager_id in departments table. Foreign key to employee_id column of employees table.(useful for reflexive joins and CONNECT BY query)");
			entity.Property(e => e.DEPARTMENT_ID)
				.HasColumnName("DEPARTMENT_ID")
				.HasColumnType("NUMBER")
				.HasComment("Department id where employee works; foreign key to department_id column of the departments table");
			entity.HasOne(d => d.EMP_DEPT_FK_Ref)
				.WithMany(p => p.EMP_DEPT_FK_RefBy)
				.HasForeignKey(d => new { d.DEPARTMENT_ID })
				.HasConstraintName("EMP_DEPT_FK_Ref");
			entity.HasOne(d => d.EMP_JOB_FK_Ref)
				.WithMany(p => p.EMP_JOB_FK_RefBy)
				.HasForeignKey(d => new { d.JOB_ID })
				.HasConstraintName("EMP_JOB_FK_Ref");
			entity.HasOne(d => d.EMP_MANAGER_FK_Ref)
				.WithMany(p => p.EMP_MANAGER_FK_RefBy)
				.HasForeignKey(d => new { d.MANAGER_ID })
				.HasConstraintName("EMP_MANAGER_FK_Ref");
		});
		modelBuilder.Entity<XE_HR_JOB_HISTORY>(entity =>
		{
			entity.ToTable("JOB_HISTORY", "HR", e => e.HasComment("Table that stores job history of the employees. If an employee changes departments within the job or changes jobs within the department, new rows get inserted into this table with old job information of the employee. Contains a complex primary key: employee_id+start_date.Contains 25 rows. References with jobs, employees, and departments tables."));
			entity.HasKey(e => new { e.EMPLOYEE_ID, e.START_DATE })
				.HasName("JHIST_EMP_ID_ST_DATE_PK");
			entity.HasIndex(e => new { e.EMPLOYEE_ID, e.START_DATE }, "JHIST_EMP_ID_ST_DATE_PK")
				.IsUnique();
			entity.HasIndex(e => new { e.DEPARTMENT_ID }, "JHIST_DEPARTMENT_IX");
			entity.HasIndex(e => new { e.EMPLOYEE_ID }, "JHIST_EMPLOYEE_IX");
			entity.HasIndex(e => new { e.JOB_ID }, "JHIST_JOB_IX");
			entity.Property(e => e.EMPLOYEE_ID)
				.HasColumnName("EMPLOYEE_ID")
				.HasColumnType("NUMBER")
				.HasComment("A not null column in the complex primary key employee_id+start_date.Foreign key to employee_id column of the employee table");
			entity.Property(e => e.START_DATE)
				.HasColumnName("START_DATE")
				.HasColumnType("DATE(7)")
				.HasComment("A not null column in the complex primary key employee_id+start_date. Must be less than the end_date of the job_history table. (enforced by constraint jhist_date_interval)");
			entity.Property(e => e.END_DATE)
				.HasColumnName("END_DATE")
				.HasColumnType("DATE(7)")
				.HasComment("Last day of the employee in this job role. A not null column. Must be greater than the start_date of the job_history table. (enforced by constraint jhist_date_interval)");
			entity.Property(e => e.JOB_ID)
				.HasColumnName("JOB_ID")
				.HasColumnType("VARCHAR2")
				.HasComment("Job role in which the employee worked in the past; foreign key to job_id column in the jobs table. A not null column.");
			entity.Property(e => e.DEPARTMENT_ID)
				.HasColumnName("DEPARTMENT_ID")
				.HasColumnType("NUMBER")
				.HasComment("Department id in which the employee worked in the past; foreign key to deparment_id column in the departments table");
			entity.HasOne(d => d.JHIST_DEPT_FK_Ref)
				.WithMany(p => p.JHIST_DEPT_FK_RefBy)
				.HasForeignKey(d => new { d.DEPARTMENT_ID })
				.HasConstraintName("JHIST_DEPT_FK_Ref");
			entity.HasOne(d => d.JHIST_EMP_FK_Ref)
				.WithMany(p => p.JHIST_EMP_FK_RefBy)
				.HasForeignKey(d => new { d.EMPLOYEE_ID })
				.HasConstraintName("JHIST_EMP_FK_Ref");
			entity.HasOne(d => d.JHIST_JOB_FK_Ref)
				.WithMany(p => p.JHIST_JOB_FK_RefBy)
				.HasForeignKey(d => new { d.JOB_ID })
				.HasConstraintName("JHIST_JOB_FK_Ref");
		});
		modelBuilder.Entity<XE_HR_JOBS>(entity =>
		{
			entity.ToTable("JOBS", "HR", e => e.HasComment("jobs table with job titles and salary ranges. Contains 19 rows.References with employees and job_history table."));
			entity.HasKey(e => new { e.JOB_ID })
				.HasName("JOB_ID_PK");
			entity.HasIndex(e => new { e.JOB_ID }, "JOB_ID_PK")
				.IsUnique();
			entity.Property(e => e.JOB_ID)
				.HasColumnName("JOB_ID")
				.HasColumnType("VARCHAR2")
				.HasComment("Primary key of jobs table.");
			entity.Property(e => e.JOB_TITLE)
				.HasColumnName("JOB_TITLE")
				.HasColumnType("VARCHAR2")
				.HasComment("A not null column that shows job title, e.g. AD_VP, FI_ACCOUNTANT");
			entity.Property(e => e.MIN_SALARY)
				.HasColumnName("MIN_SALARY")
				.HasColumnType("NUMBER")
				.HasComment("Minimum salary for a job title.");
			entity.Property(e => e.MAX_SALARY)
				.HasColumnName("MAX_SALARY")
				.HasColumnType("NUMBER")
				.HasComment("Maximum salary for a job title");
		});
		modelBuilder.Entity<XE_HR_LOCATIONS>(entity =>
		{
			entity.ToTable("LOCATIONS", "HR");
			entity.HasKey(e => new { e.LOCATION_ID })
				.HasName("LOC_ID_PK");
			entity.HasIndex(e => new { e.CITY }, "LOC_CITY_IX");
			entity.HasIndex(e => new { e.COUNTRY_ID }, "LOC_COUNTRY_IX");
			entity.HasIndex(e => new { e.LOCATION_ID }, "LOC_ID_PK")
				.IsUnique();
			entity.HasIndex(e => new { e.STATE_PROVINCE }, "LOC_STATE_PROVINCE_IX");
			entity.Property(e => e.LOCATION_ID)
				.HasColumnName("LOCATION_ID")
				.HasColumnType("NUMBER")
				.HasComment("Primary key of locations table");
			entity.Property(e => e.STREET_ADDRESS)
				.HasColumnName("STREET_ADDRESS")
				.HasColumnType("VARCHAR2")
				.HasComment("Street address of an office, warehouse, or production site of a company.Contains building number and street name");
			entity.Property(e => e.POSTAL_CODE)
				.HasColumnName("POSTAL_CODE")
				.HasColumnType("VARCHAR2")
				.HasComment("Postal code of the location of an office, warehouse, or production site of a company. ");
			entity.Property(e => e.CITY)
				.HasColumnName("CITY")
				.HasColumnType("VARCHAR2")
				.HasComment("A not null column that shows city where an office, warehouse, or production site of a company is located. ");
			entity.Property(e => e.STATE_PROVINCE)
				.HasColumnName("STATE_PROVINCE")
				.HasColumnType("VARCHAR2")
				.HasComment("State or Province where an office, warehouse, or production site of a company is located.");
			entity.Property(e => e.COUNTRY_ID)
				.HasColumnName("COUNTRY_ID")
				.HasColumnType("CHAR")
				.HasMaxLength(2)
				.HasComment("Country where an office, warehouse, or production site of a company islocated. Foreign key to country_id column of the countries table.");
			entity.HasOne(d => d.LOC_C_ID_FK_Ref)
				.WithMany(p => p.LOC_C_ID_FK_RefBy)
				.HasForeignKey(d => new { d.COUNTRY_ID })
				.HasConstraintName("LOC_C_ID_FK_Ref");
		});
		modelBuilder.Entity<XE_HR_REGIONS>(entity =>
		{
			entity.ToTable("REGIONS", "HR");
			entity.HasKey(e => new { e.REGION_ID })
				.HasName("REG_ID_PK");
			entity.HasIndex(e => new { e.REGION_ID }, "REG_ID_PK")
				.IsUnique();
			entity.Property(e => e.REGION_ID)
				.HasColumnName("REGION_ID")
				.HasColumnType("NUMBER");
			entity.Property(e => e.REGION_NAME)
				.HasColumnName("REGION_NAME")
				.HasColumnType("VARCHAR2");
		});
		modelBuilder.Entity<XE_HR_EMP_DETAILS_VIEW>(entity =>
		{
			entity.HasNoKey();
			entity.ToView("EMP_DETAILS_VIEW", "HR");
			entity.Property(e => e.EMPLOYEE_ID)
				.HasColumnName("EMPLOYEE_ID")
				.HasColumnType("NUMBER");
			entity.Property(e => e.JOB_ID)
				.HasColumnName("JOB_ID")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.MANAGER_ID)
				.HasColumnName("MANAGER_ID")
				.HasColumnType("NUMBER");
			entity.Property(e => e.DEPARTMENT_ID)
				.HasColumnName("DEPARTMENT_ID")
				.HasColumnType("NUMBER");
			entity.Property(e => e.LOCATION_ID)
				.HasColumnName("LOCATION_ID")
				.HasColumnType("NUMBER");
			entity.Property(e => e.COUNTRY_ID)
				.HasColumnName("COUNTRY_ID")
				.HasColumnType("CHAR")
				.HasMaxLength(2);
			entity.Property(e => e.FIRST_NAME)
				.HasColumnName("FIRST_NAME")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.LAST_NAME)
				.HasColumnName("LAST_NAME")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.SALARY)
				.HasColumnName("SALARY")
				.HasColumnType("NUMBER");
			entity.Property(e => e.COMMISSION_PCT)
				.HasColumnName("COMMISSION_PCT")
				.HasColumnType("NUMBER");
			entity.Property(e => e.DEPARTMENT_NAME)
				.HasColumnName("DEPARTMENT_NAME")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.JOB_TITLE)
				.HasColumnName("JOB_TITLE")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.CITY)
				.HasColumnName("CITY")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.STATE_PROVINCE)
				.HasColumnName("STATE_PROVINCE")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.COUNTRY_NAME)
				.HasColumnName("COUNTRY_NAME")
				.HasColumnType("VARCHAR2");
			entity.Property(e => e.REGION_NAME)
				.HasColumnName("REGION_NAME")
				.HasColumnType("VARCHAR2");
		});
    }
}
