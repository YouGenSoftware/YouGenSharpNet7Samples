/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202926 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using XE_HR_Common.IndirectReferenceTransformerModels;
using XE_HR_BackEndCommon.RequestHandlers;
namespace XE_HR_BackEndDatabaseClient.Controllers;
[SwaggerTag(@"Controller Description: N/A")]
[RequireHttps]
public class XE_HR_LOCATIONS_Controller : ControllerBase
{
	private readonly IXE_HR_LOCATIONS_RequestHandler _requestHandler;
	public XE_HR_LOCATIONS_Controller(IXE_HR_LOCATIONS_RequestHandler requestHandler)
	{
		_requestHandler = requestHandler;
	}
	/// <summary>
	/// Get All records of LOCATIONS table
	/// </summary>
	[HttpGet, Route("XE_HR_LOCATIONS/GetAll")]
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetAll()
	{
		return await _requestHandler.HandleGetAll();
	}
	/// <summary>
	/// Get record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_LOCATIONS/GetByCITY")]
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetByCITY(String cITY)
	{
		return await _requestHandler.HandleGetByCITY(cITY);
	}
	/// <summary>
	/// Get record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_LOCATIONS/GetByCOUNTRY_ID")]
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetByCOUNTRY_ID(String? cOUNTRY_ID)
	{
		return await _requestHandler.HandleGetByCOUNTRY_ID(cOUNTRY_ID);
	}
	/// <summary>
	/// Get record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_LOCATIONS/GetByLOCATION_ID")]
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetByLOCATION_ID(String? lOCATION_ID_IR)
	{
		return await _requestHandler.HandleGetByLOCATION_ID(lOCATION_ID_IR);
	}
	/// <summary>
	/// Get record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_LOCATIONS/GetBySTATE_PROVINCE")]
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetBySTATE_PROVINCE(String? sTATE_PROVINCE)
	{
		return await _requestHandler.HandleGetBySTATE_PROVINCE(sTATE_PROVINCE);
	}
	/// <summary>
	/// Create and return record of LOCATIONS table
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPost, Route("XE_HR_LOCATIONS/Create")]
	public async Task<XE_HR_LOCATIONS_IR?> Create([FromBody]XE_HR_LOCATIONS_IR input)
	{
		return await _requestHandler.HandleCreate(input);
	}
	/// <summary>
	/// Update record of LOCATIONS table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_LOCATIONS/UpdateByCITY")]
	public async Task UpdateByCITY(String cITY, [FromBody]XE_HR_LOCATIONS_IR input)
	{
		await _requestHandler.HandleUpdateByCITY(cITY, input);
	}
	/// <summary>
	/// Update record of LOCATIONS table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_LOCATIONS/UpdateByCOUNTRY_ID")]
	public async Task UpdateByCOUNTRY_ID(String? cOUNTRY_ID, [FromBody]XE_HR_LOCATIONS_IR input)
	{
		await _requestHandler.HandleUpdateByCOUNTRY_ID(cOUNTRY_ID, input);
	}
	/// <summary>
	/// Update record of LOCATIONS table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_LOCATIONS/UpdateByLOCATION_ID")]
	public async Task UpdateByLOCATION_ID(String? lOCATION_ID_IR, [FromBody]XE_HR_LOCATIONS_IR input)
	{
		await _requestHandler.HandleUpdateByLOCATION_ID(lOCATION_ID_IR, input);
	}
	/// <summary>
	/// Update record of LOCATIONS table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_LOCATIONS/UpdateBySTATE_PROVINCE")]
	public async Task UpdateBySTATE_PROVINCE(String? sTATE_PROVINCE, [FromBody]XE_HR_LOCATIONS_IR input)
	{
		await _requestHandler.HandleUpdateBySTATE_PROVINCE(sTATE_PROVINCE, input);
	}
	/// <summary>
	/// Delete record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_LOCATIONS/DeleteByCITY")]
	public async Task DeleteByCITY(String cITY)
	{
		await _requestHandler.HandleDeleteByCITY(cITY);
	}
	/// <summary>
	/// Delete record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_LOCATIONS/DeleteByCOUNTRY_ID")]
	public async Task DeleteByCOUNTRY_ID(String? cOUNTRY_ID)
	{
		await _requestHandler.HandleDeleteByCOUNTRY_ID(cOUNTRY_ID);
	}
	/// <summary>
	/// Delete record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_LOCATIONS/DeleteByLOCATION_ID")]
	public async Task DeleteByLOCATION_ID(String? lOCATION_ID_IR)
	{
		await _requestHandler.HandleDeleteByLOCATION_ID(lOCATION_ID_IR);
	}
	/// <summary>
	/// Delete record of LOCATIONS table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_LOCATIONS/DeleteBySTATE_PROVINCE")]
	public async Task DeleteBySTATE_PROVINCE(String? sTATE_PROVINCE)
	{
		await _requestHandler.HandleDeleteBySTATE_PROVINCE(sTATE_PROVINCE);
	}
}
