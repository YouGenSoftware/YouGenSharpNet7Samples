/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202926 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.SignalR.Client;
using XE_HR_Common.IndirectReferenceTransformerModels;
namespace XE_HR_FrontEndSignalRWebsocketClient.SignalRWebsocketClients;
public class XE_HR_JOB_HISTORY_SignalRWebsocketClient : SignalRWebsocketClientBase, IXE_HR_JOB_HISTORY_SignalRWebsocketClient, IAsyncDisposable
{
	public XE_HR_JOB_HISTORY_SignalRWebsocketClient(String hubUrl) : base(hubUrl)
    {
    }
	public async Task<IEnumerable<XE_HR_JOB_HISTORY_IR>?> GetByBestMatchedQueryPattern(XE_HR_JOB_HISTORY_IR input)
	{
		if (input == null) return null;
		IEnumerable<XE_HR_JOB_HISTORY_IR>? retData;
		if (input.EMPLOYEE_ID_IR_HasBeenChanged && input.START_DATE_HasBeenChanged) retData = await GetByEMPLOYEE_IDAndSTART_DATE(input.EMPLOYEE_ID_IR ?? default, input.START_DATE ?? default);
		else if (input.DEPARTMENT_ID_IR_HasBeenChanged) retData = await GetByDEPARTMENT_ID(input.DEPARTMENT_ID_IR);
		else if (input.EMPLOYEE_ID_IR_HasBeenChanged) retData = await GetByEMPLOYEE_ID(input.EMPLOYEE_ID_IR ?? default);
		else if (input.JOB_ID_HasBeenChanged) retData = await GetByJOB_ID(input.JOB_ID ?? String.Empty);
		else retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(XE_HR_JOB_HISTORY_IR record, XE_HR_JOB_HISTORY_IR filter)
	{
		 // unencrypted properties only
		return			(!filter.END_DATE_HasBeenChanged || record.END_DATE == filter.END_DATE);
	}
	public async Task<IEnumerable<XE_HR_JOB_HISTORY_IR>?> GetAll()
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_JOB_HISTORY_IR>?>("GetAll");
	}
	public async Task<IEnumerable<XE_HR_JOB_HISTORY_IR>?> GetByEMPLOYEE_IDAndSTART_DATE(String? eMPLOYEE_ID_IR, DateTime sTART_DATE)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_JOB_HISTORY_IR>?>("GetByEMPLOYEE_IDAndSTART_DATE", eMPLOYEE_ID_IR, sTART_DATE);
	}
	public async Task<IEnumerable<XE_HR_JOB_HISTORY_IR>?> GetByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_JOB_HISTORY_IR>?>("GetByDEPARTMENT_ID", dEPARTMENT_ID_IR);
	}
	public async Task<IEnumerable<XE_HR_JOB_HISTORY_IR>?> GetByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_JOB_HISTORY_IR>?>("GetByEMPLOYEE_ID", eMPLOYEE_ID_IR);
	}
	public async Task<IEnumerable<XE_HR_JOB_HISTORY_IR>?> GetByJOB_ID(String jOB_ID)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_JOB_HISTORY_IR>?>("GetByJOB_ID", jOB_ID);
	}
	public async Task<XE_HR_JOB_HISTORY_IR?> Create(XE_HR_JOB_HISTORY_IR input)
	{
		return await _hubConnection.InvokeAsync<XE_HR_JOB_HISTORY_IR?>("Create", input);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, XE_HR_JOB_HISTORY_IR updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByEMPLOYEE_IDAndSTART_DATE(inputSplits[0], DateTime.Parse(inputSplits[1]), updateModel);
	}
	public async Task UpdateByEMPLOYEE_IDAndSTART_DATE(String? eMPLOYEE_ID_IR, DateTime sTART_DATE, XE_HR_JOB_HISTORY_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByEMPLOYEE_IDAndSTART_DATE", eMPLOYEE_ID_IR, sTART_DATE, input);
	}
	public async Task UpdateByDEPARTMENT_ID(String? dEPARTMENT_ID_IR, XE_HR_JOB_HISTORY_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByDEPARTMENT_ID", dEPARTMENT_ID_IR, input);
	}
	public async Task UpdateByEMPLOYEE_ID(String? eMPLOYEE_ID_IR, XE_HR_JOB_HISTORY_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByEMPLOYEE_ID", eMPLOYEE_ID_IR, input);
	}
	public async Task UpdateByJOB_ID(String jOB_ID, XE_HR_JOB_HISTORY_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByJOB_ID", jOB_ID, input);
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByEMPLOYEE_IDAndSTART_DATE(inputSplits[0], DateTime.Parse(inputSplits[1]));
	}
	public async Task DeleteByEMPLOYEE_IDAndSTART_DATE(String? eMPLOYEE_ID_IR, DateTime sTART_DATE)
	{
		await _hubConnection.InvokeAsync("DeleteByEMPLOYEE_IDAndSTART_DATE", eMPLOYEE_ID_IR, sTART_DATE);
	}
	public async Task DeleteByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByDEPARTMENT_ID", dEPARTMENT_ID_IR);
	}
	public async Task DeleteByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByEMPLOYEE_ID", eMPLOYEE_ID_IR);
	}
	public async Task DeleteByJOB_ID(String jOB_ID)
	{
		await _hubConnection.InvokeAsync("DeleteByJOB_ID", jOB_ID);
	}
    public async Task InitializeAsync()
    {
        await base.EstablishConnection();
    }
    public Boolean GetStatus()
    {
        return base.Initiated;
    }
    public async ValueTask DisposeAsync()
    {
        await base.TerminateConnection();
        GC.SuppressFinalize(this);
    }
}
