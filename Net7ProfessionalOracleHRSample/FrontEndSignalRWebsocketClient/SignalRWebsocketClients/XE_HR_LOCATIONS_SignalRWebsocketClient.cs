/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202926 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.SignalR.Client;
using XE_HR_Common.IndirectReferenceTransformerModels;
namespace XE_HR_FrontEndSignalRWebsocketClient.SignalRWebsocketClients;
public class XE_HR_LOCATIONS_SignalRWebsocketClient : SignalRWebsocketClientBase, IXE_HR_LOCATIONS_SignalRWebsocketClient, IAsyncDisposable
{
	public XE_HR_LOCATIONS_SignalRWebsocketClient(String hubUrl) : base(hubUrl)
    {
    }
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetByBestMatchedQueryPattern(XE_HR_LOCATIONS_IR input)
	{
		if (input == null) return null;
		IEnumerable<XE_HR_LOCATIONS_IR>? retData;
		if (input.CITY_HasBeenChanged) retData = await GetByCITY(input.CITY ?? String.Empty);
		else if (input.COUNTRY_ID_HasBeenChanged) retData = await GetByCOUNTRY_ID(input.COUNTRY_ID);
		else if (input.LOCATION_ID_IR_HasBeenChanged) retData = await GetByLOCATION_ID(input.LOCATION_ID_IR ?? default);
		else if (input.STATE_PROVINCE_HasBeenChanged) retData = await GetBySTATE_PROVINCE(input.STATE_PROVINCE);
		else retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(XE_HR_LOCATIONS_IR record, XE_HR_LOCATIONS_IR filter)
	{
		 // unencrypted properties only
		return			(!filter.STREET_ADDRESS_HasBeenChanged || record.STREET_ADDRESS == filter.STREET_ADDRESS) &&
			(!filter.POSTAL_CODE_HasBeenChanged || record.POSTAL_CODE == filter.POSTAL_CODE) &&
			(!filter.CITY_HasBeenChanged || record.CITY == filter.CITY) &&
			(!filter.STATE_PROVINCE_HasBeenChanged || record.STATE_PROVINCE == filter.STATE_PROVINCE);
	}
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetAll()
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_LOCATIONS_IR>?>("GetAll");
	}
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetByCITY(String cITY)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_LOCATIONS_IR>?>("GetByCITY", cITY);
	}
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetByCOUNTRY_ID(String? cOUNTRY_ID)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_LOCATIONS_IR>?>("GetByCOUNTRY_ID", cOUNTRY_ID);
	}
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetByLOCATION_ID(String? lOCATION_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_LOCATIONS_IR>?>("GetByLOCATION_ID", lOCATION_ID_IR);
	}
	public async Task<IEnumerable<XE_HR_LOCATIONS_IR>?> GetBySTATE_PROVINCE(String? sTATE_PROVINCE)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_LOCATIONS_IR>?>("GetBySTATE_PROVINCE", sTATE_PROVINCE);
	}
	public async Task<XE_HR_LOCATIONS_IR?> Create(XE_HR_LOCATIONS_IR input)
	{
		return await _hubConnection.InvokeAsync<XE_HR_LOCATIONS_IR?>("Create", input);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, XE_HR_LOCATIONS_IR updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByLOCATION_ID(inputSplits[0], updateModel);
	}
	public async Task UpdateByCITY(String cITY, XE_HR_LOCATIONS_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByCITY", cITY, input);
	}
	public async Task UpdateByCOUNTRY_ID(String? cOUNTRY_ID, XE_HR_LOCATIONS_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByCOUNTRY_ID", cOUNTRY_ID, input);
	}
	public async Task UpdateByLOCATION_ID(String? lOCATION_ID_IR, XE_HR_LOCATIONS_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByLOCATION_ID", lOCATION_ID_IR, input);
	}
	public async Task UpdateBySTATE_PROVINCE(String? sTATE_PROVINCE, XE_HR_LOCATIONS_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateBySTATE_PROVINCE", sTATE_PROVINCE, input);
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByLOCATION_ID(inputSplits[0]);
	}
	public async Task DeleteByCITY(String cITY)
	{
		await _hubConnection.InvokeAsync("DeleteByCITY", cITY);
	}
	public async Task DeleteByCOUNTRY_ID(String? cOUNTRY_ID)
	{
		await _hubConnection.InvokeAsync("DeleteByCOUNTRY_ID", cOUNTRY_ID);
	}
	public async Task DeleteByLOCATION_ID(String? lOCATION_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByLOCATION_ID", lOCATION_ID_IR);
	}
	public async Task DeleteBySTATE_PROVINCE(String? sTATE_PROVINCE)
	{
		await _hubConnection.InvokeAsync("DeleteBySTATE_PROVINCE", sTATE_PROVINCE);
	}
    public async Task InitializeAsync()
    {
        await base.EstablishConnection();
    }
    public Boolean GetStatus()
    {
        return base.Initiated;
    }
    public async ValueTask DisposeAsync()
    {
        await base.TerminateConnection();
        GC.SuppressFinalize(this);
    }
}
