/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202926 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Tynamix.ObjectFiller;
using XE_HR_BackEndSqlEntities.Entities;
namespace XE_HR_BackEndDatabaseClientTests.HydratedDynamicEntities;
public partial class XE_HR_HydratedDynamicEntities  : XE_HR_HydratedDynamicEntitiesBase
{
	protected Filler<XE_HR_EMP_DETAILS_VIEW> _XE_HR_EMP_DETAILS_VIEW_Filler = new Filler<XE_HR_EMP_DETAILS_VIEW>();
	protected FillerSetup? _XE_HR_EMP_DETAILS_VIEW_FillerSetup;
	public FillerSetup GetXE_HR_EMP_DETAILS_VIEW_FillerSetup(Boolean onlyFillExplicitlyNamedProperties)
	{
		if (_XE_HR_EMP_DETAILS_VIEW_FillerSetup != null)
			return _XE_HR_EMP_DETAILS_VIEW_FillerSetup;
		_XE_HR_EMP_DETAILS_VIEW_FillerSetup = _XE_HR_EMP_DETAILS_VIEW_Filler.Setup(onlyFillExplicitlyNamedProperties)
		.OnProperty(x => x.EMPLOYEE_ID).Use(() => Random.Shared.Next(Int32.MinValue, Int32.MaxValue))
		.OnProperty(x => x.JOB_ID).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(10)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.MANAGER_ID).Use(() => Random.Shared.Next(Int32.MinValue, Int32.MaxValue))
		.OnProperty(x => x.DEPARTMENT_ID).Use(() => Random.Shared.Next(Int32.MinValue, Int32.MaxValue))
		.OnProperty(x => x.LOCATION_ID).Use(() => Random.Shared.Next(Int32.MinValue, Int32.MaxValue))
		.OnProperty(x => x.COUNTRY_ID).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(2)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.FIRST_NAME).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(20)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.LAST_NAME).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(25)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.SALARY).Use(() => Convert.ToDecimal(Random.Shared.NextDouble()))
		.OnProperty(x => x.COMMISSION_PCT).Use(() => Convert.ToDecimal(Random.Shared.NextDouble()))
		.OnProperty(x => x.DEPARTMENT_NAME).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(30)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.JOB_TITLE).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(35)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.CITY).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(30)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.STATE_PROVINCE).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(25)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.COUNTRY_NAME).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(40)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.OnProperty(x => x.REGION_NAME).Use(() => new String(Enumerable.Repeat(_chars, Convert.ToInt32(25)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()))
		.Result;
		return _XE_HR_EMP_DETAILS_VIEW_FillerSetup;
	}
	public XE_HR_EMP_DETAILS_VIEW GetHydratedDynamicXE_HR_EMP_DETAILS_VIEW(Boolean onlyFillExplicitlyNamedProperties = true)
	{
		return GetHydratedDynamicIEnumerableOfXE_HR_EMP_DETAILS_VIEW(1, onlyFillExplicitlyNamedProperties).First();
	}
	public IEnumerable<XE_HR_EMP_DETAILS_VIEW> GetHydratedDynamicIEnumerableOfXE_HR_EMP_DETAILS_VIEW(Int32 numberToCreate, 
		Boolean onlyFillExplicitlyNamedProperties = true)
	{
		_XE_HR_EMP_DETAILS_VIEW_Filler.Setup(GetXE_HR_EMP_DETAILS_VIEW_FillerSetup(onlyFillExplicitlyNamedProperties));
		var retObjects = _XE_HR_EMP_DETAILS_VIEW_Filler.Create(numberToCreate);
		return retObjects;
	}
}
