<!-- **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202926 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 -->
<h4 Class="my-2">@modelName</h4>
<MudTable T="XE_HR_JOBS_IR" @ref="primaryTable" Height="250px"
        RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"
        Items="RetrievedRecords" HorizontalScrollbar="true" Hover="true"
        SortLabel="Sort By" Filter="new Func<XE_HR_JOBS_IR,Boolean>(FilterFuncAll)" FixedHeader="true">
    <ToolBarContent>
        <MudTextField @bind-Value="searchFilterText" Placeholder="Filter retrieved records" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
			<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_JOBS_IR, object>(x=>x.JOB_ID!)">JOB_ID</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_JOBS_IR, object>(x=>x.JOB_TITLE!)">JOB_TITLE</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_JOBS_IR, object>(x=>x.MIN_SALARY!)">MIN_SALARY</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_JOBS_IR, object>(x=>x.MAX_SALARY!)">MAX_SALARY</MudTableSortLabel></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="JOB_ID">@context.JOB_ID</MudTd>
			<MudTd DataLabel="JOB_TITLE">@context.JOB_TITLE</MudTd>
			<MudTd DataLabel="MIN_SALARY">@context.MIN_SALARY</MudTd>
			<MudTd DataLabel="MAX_SALARY">@context.MAX_SALARY</MudTd>
		</RowTemplate>
</MudTable>
@code {
    [Parameter]
    public IEnumerable<XE_HR_JOBS_IR>? RetrievedRecords { get; set; }
    private String? _primaryKey;
    [Parameter]
    public String? PrimaryKey {
        get => _primaryKey;
        set
        {
            if (_primaryKey == value) return;
            _primaryKey = value;
            GetAndSelectMatchingRecord();
        }
    }
    private XE_HR_JOBS_IR? selectedItem { get; set; }
    [Parameter]
    public XE_HR_JOBS_IR? SelectedItem {
        get => selectedItem;
        set
        {
            if (selectedItem == value) return;
            selectedItem = value;
        }
    }
    [Parameter]
    public EventCallback<XE_HR_JOBS_IR?> SelectedItemChanged { get; set; }
	[Inject] XE_HR_JOBS_HttpClient? httpClient { get; set; }
	// [Inject] XE_HR_JOBS_SignalRWebsocketClient? websocketClient { get; set; }
    private MudTable<XE_HR_JOBS_IR>? primaryTable = new MudTable<XE_HR_JOBS_IR>();
    private XE_HR_JOBS_IR searchModel = new XE_HR_JOBS_IR();
    private String searchFilterText = "";
    private String modelName = "XE_HR_JOBS_IR";
    private Boolean FilterFuncAll(XE_HR_JOBS_IR element) => FilterFunc(element, searchFilterText);
    private Boolean FilterFunc(XE_HR_JOBS_IR element, String searchString)
    {
        if (String.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{ element.JOB_ID } { element.JOB_TITLE } { element.MIN_SALARY } { element.MAX_SALARY }".Contains(searchString))
           return true;
        return false;
    }
    private void RowClickEvent(TableRowClickEventArgs<XE_HR_JOBS_IR> tableRowClickEventArgs)
	{
	}
    private String SelectedRowClassFunc(XE_HR_JOBS_IR element, Int32 rowNumber)
    {
        if (primaryTable!.SelectedItem != null && primaryTable!.SelectedItem.Equals(element))
            return "selected";
        else
            return "";
    }
    private void SelectRowAdhoc(XE_HR_JOBS_IR matchedRecord)
    {
        if (primaryTable!.SelectedItem != null &&
            primaryTable.SelectedItem.PrimaryKeyHashedForUniqueObjectComparison != matchedRecord.PrimaryKeyHashedForUniqueObjectComparison)
            primaryTable.SetSelectedItem(primaryTable.Items!.First(x => x.PrimaryKeyHashedForUniqueObjectComparison == matchedRecord.PrimaryKeyHashedForUniqueObjectComparison));
    }  
    private async Task GetAndSelectMatchingRecord()
    {
        var matchedRecords = await httpClient!.GetByBestMatchedQueryPattern(searchModel);
        // var matchedRecords = await websocketlLient!.GetByBestMatchedQueryPattern(searchModel);
        if (matchedRecords!.Any())
            SelectRowAdhoc(matchedRecords!.First());
        StateHasChanged();
    }
    private void ParsePrimaryKeyParameter()
    {
        //parse the primary key into the searchModel properties
		var splitPrimaryKey = PrimaryKey!.Split((Char)27);
		searchModel.JOB_ID = (splitPrimaryKey[0]);
    }
    protected override async Task OnInitializedAsync()
    {        
        await base.OnInitializedAsync();
    }
    protected override async Task OnParametersSetAsync() 
    {
        if (!String.IsNullOrWhiteSpace(PrimaryKey))
            ParsePrimaryKeyParameter();
        await base.OnParametersSetAsync();
    }
}
