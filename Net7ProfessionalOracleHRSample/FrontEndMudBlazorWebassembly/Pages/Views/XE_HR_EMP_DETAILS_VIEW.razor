<!-- **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202926 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 -->
@implements IDisposable
@page "/views/XE_HR_EMP_DETAILS_VIEW/" 
@inherits ComponentBaseOverrider
<PageTitle>@modelName</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@modelName</MudText>
@if (waiting == true)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudText><strong>Data fetch filters</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudCard>
                    <MudCardContent>
                        <MudForm Model="@searchModel" @ref="@searchForm" Validation="@(() => searchValidator.ValidateValue)" ValidationDelay="0">
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@searchModel.EMPLOYEE_ID_IR"
	For="@(() => searchModel.EMPLOYEE_ID_IR)"
	ReadOnly="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="JOB_ID"
	@bind-Value="@searchModel.JOB_ID"
	For="@(() => searchModel.JOB_ID)"
	Clearable="false"
	Lines="0"
	MaxLength="10"
	Immediate="true" />
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@searchModel.MANAGER_ID_IR"
	For="@(() => searchModel.MANAGER_ID_IR)"
	ReadOnly="true" />
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@searchModel.DEPARTMENT_ID_IR"
	For="@(() => searchModel.DEPARTMENT_ID_IR)"
	ReadOnly="true" />
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@searchModel.LOCATION_ID_IR"
	For="@(() => searchModel.LOCATION_ID_IR)"
	ReadOnly="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="COUNTRY_ID"
	@bind-Value="@searchModel.COUNTRY_ID"
	For="@(() => searchModel.COUNTRY_ID)"
	Clearable="true"
	Lines="0"
	MaxLength="2"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="FIRST_NAME"
	@bind-Value="@searchModel.FIRST_NAME"
	For="@(() => searchModel.FIRST_NAME)"
	Clearable="true"
	Lines="0"
	MaxLength="20"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="LAST_NAME"
	@bind-Value="@searchModel.LAST_NAME"
	For="@(() => searchModel.LAST_NAME)"
	Clearable="false"
	Lines="0"
	MaxLength="25"
	Immediate="true" />
<MudNumericField 
	Label="SALARY"
	Variant="Variant.Text"
	@bind-Value="@searchModel.SALARY"
	For="@(() => searchModel.SALARY)"
	Clearable="true" 
	Step="2" 
	Immediate="true"
	T="Decimal?"
	/>
<MudNumericField 
	Label="COMMISSION_PCT"
	Variant="Variant.Text"
	@bind-Value="@searchModel.COMMISSION_PCT"
	For="@(() => searchModel.COMMISSION_PCT)"
	Clearable="true" 
	Step="2" 
	Immediate="true"
	T="Decimal?"
	/>
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="DEPARTMENT_NAME"
	@bind-Value="@searchModel.DEPARTMENT_NAME"
	For="@(() => searchModel.DEPARTMENT_NAME)"
	Clearable="false"
	Lines="0"
	MaxLength="30"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="JOB_TITLE"
	@bind-Value="@searchModel.JOB_TITLE"
	For="@(() => searchModel.JOB_TITLE)"
	Clearable="false"
	Lines="0"
	MaxLength="35"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="CITY"
	@bind-Value="@searchModel.CITY"
	For="@(() => searchModel.CITY)"
	Clearable="false"
	Lines="0"
	MaxLength="30"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="STATE_PROVINCE"
	@bind-Value="@searchModel.STATE_PROVINCE"
	For="@(() => searchModel.STATE_PROVINCE)"
	Clearable="true"
	Lines="0"
	MaxLength="25"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="COUNTRY_NAME"
	@bind-Value="@searchModel.COUNTRY_NAME"
	For="@(() => searchModel.COUNTRY_NAME)"
	Clearable="true"
	Lines="0"
	MaxLength="40"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="REGION_NAME"
	@bind-Value="@searchModel.REGION_NAME"
	For="@(() => searchModel.REGION_NAME)"
	Clearable="true"
	Lines="0"
	MaxLength="25"
	Immediate="true" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Search(retrieveAll: true))">Retrieve all records</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Search())">Retrieve records by criteria</MudButton>
                    </MudCardActions>
                </MudCard>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudTable T="XE_HR_EMP_DETAILS_VIEW_IR" @ref="primaryTable"
          RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"
          Items="retrievedRecords" HorizontalScrollbar="true" Hover="true"
          SortLabel="Sort By" Filter="new Func<XE_HR_EMP_DETAILS_VIEW_IR,Boolean>(FilterFuncAll)"
          Virtualize="true" FixedHeader="true">
        <ToolBarContent>
            <MudTextField @bind-Value="searchFilterText" Placeholder="Filter retrieved records" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
			<HeaderContent>
			<!-- <MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.EMPLOYEE_ID_IR!)">EMPLOYEE_ID_IR</MudTableSortLabel></MudTh> -->
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.JOB_ID!)">JOB_ID</MudTableSortLabel></MudTh>
			<!-- <MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.MANAGER_ID_IR!)">MANAGER_ID_IR</MudTableSortLabel></MudTh> -->
			<!-- <MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.DEPARTMENT_ID_IR!)">DEPARTMENT_ID_IR</MudTableSortLabel></MudTh> -->
			<!-- <MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.LOCATION_ID_IR!)">LOCATION_ID_IR</MudTableSortLabel></MudTh> -->
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.COUNTRY_ID!)">COUNTRY_ID</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.FIRST_NAME!)">FIRST_NAME</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.LAST_NAME!)">LAST_NAME</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.SALARY!)">SALARY</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.COMMISSION_PCT!)">COMMISSION_PCT</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.DEPARTMENT_NAME!)">DEPARTMENT_NAME</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.JOB_TITLE!)">JOB_TITLE</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.CITY!)">CITY</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.STATE_PROVINCE!)">STATE_PROVINCE</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.COUNTRY_NAME!)">COUNTRY_NAME</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<XE_HR_EMP_DETAILS_VIEW_IR, object>(x=>x.REGION_NAME!)">REGION_NAME</MudTableSortLabel></MudTh>
		</HeaderContent>
		<RowTemplate>
			<!-- <MudTd DataLabel="EMPLOYEE_ID_IR">@context.EMPLOYEE_ID_IR</MudTd> -->
			<!-- <MudTd DataLabel="JOB_ID_IR">@context.JOB_ID_IR</MudTd> -->
			<!-- <MudTd DataLabel="MANAGER_ID_IR">@context.MANAGER_ID_IR</MudTd> -->
			<!-- <MudTd DataLabel="DEPARTMENT_ID_IR">@context.DEPARTMENT_ID_IR</MudTd> -->
			<!-- <MudTd DataLabel="LOCATION_ID_IR">@context.LOCATION_ID_IR</MudTd> -->
			<!-- <MudTd DataLabel="COUNTRY_ID_IR">@context.COUNTRY_ID_IR</MudTd> -->
			<MudTd DataLabel="FIRST_NAME">@context.FIRST_NAME</MudTd>
			<MudTd DataLabel="LAST_NAME">@context.LAST_NAME</MudTd>
			<!-- <MudTd DataLabel="SALARY_IR">@context.SALARY_IR</MudTd> -->
			<!-- <MudTd DataLabel="COMMISSION_PCT_IR">@context.COMMISSION_PCT_IR</MudTd> -->
			<MudTd DataLabel="DEPARTMENT_NAME">@context.DEPARTMENT_NAME</MudTd>
			<MudTd DataLabel="JOB_TITLE">@context.JOB_TITLE</MudTd>
			<MudTd DataLabel="CITY">@context.CITY</MudTd>
			<MudTd DataLabel="STATE_PROVINCE">@context.STATE_PROVINCE</MudTd>
			<MudTd DataLabel="COUNTRY_NAME">@context.COUNTRY_NAME</MudTd>
			<MudTd DataLabel="REGION_NAME">@context.REGION_NAME</MudTd>
		</RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 50}" />
        </PagerContent>
    </MudTable>   
}
@code {
    [Parameter]
    public String? PrimaryKey { get; set; }
	[Inject] XE_HR_EMP_DETAILS_VIEW_HttpClient? httpClient { get; set; }
	// [Inject] XE_HR_EMP_DETAILS_VIEW_SignalRWebsocketClient? websocketClient { get; set; }
    [Inject]
    private XE_HR_EMP_DETAILS_VIEW_IR_FluentValidator searchValidator { get; set; } = default!;
    private MudForm? searchForm = new MudForm();
    private MudTable<XE_HR_EMP_DETAILS_VIEW_IR>? primaryTable = new MudTable<XE_HR_EMP_DETAILS_VIEW_IR>();
    private String searchFilterText = "";
    private Int32 selectedRowNumber = -1;
    private XE_HR_EMP_DETAILS_VIEW_IR searchModel = new XE_HR_EMP_DETAILS_VIEW_IR();
    private XE_HR_EMP_DETAILS_VIEW_IR referencesModel = new XE_HR_EMP_DETAILS_VIEW_IR();
    private IEnumerable<XE_HR_EMP_DETAILS_VIEW_IR>? retrievedRecords;
    private String modelName = "XE_HR_EMP_DETAILS_VIEW_IR";
    private Boolean waiting;
    private Boolean FilterFuncAll(XE_HR_EMP_DETAILS_VIEW_IR element) => FilterFunc(element, searchFilterText);
    private Boolean FilterFunc(XE_HR_EMP_DETAILS_VIEW_IR element, String searchString)
    {
        if (String.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{ element.EMPLOYEE_ID_IR } { element.JOB_ID } { element.MANAGER_ID_IR } { element.DEPARTMENT_ID_IR } { element.LOCATION_ID_IR } { element.COUNTRY_ID } { element.FIRST_NAME } { element.LAST_NAME } { element.SALARY } { element.COMMISSION_PCT } { element.DEPARTMENT_NAME } { element.JOB_TITLE } { element.CITY } { element.STATE_PROVINCE } { element.COUNTRY_NAME } { element.REGION_NAME }".Contains(searchString))
           return true;
        return false;
    }
    private void RowClickEvent(TableRowClickEventArgs<XE_HR_EMP_DETAILS_VIEW_IR> tableRowClickEventArgs)
	{
	}
    private String SelectedRowClassFunc(XE_HR_EMP_DETAILS_VIEW_IR element, Int32 rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return String.Empty;
        }
        else if (primaryTable!.SelectedItem != null && primaryTable!.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return String.Empty;
        }
    }
    private async Task Search(Boolean retrieveAll = false)
    {
        if (!retrieveAll)
            await searchForm!.Validate();
        if (!retrieveAll && !searchForm!.IsValid)
            return;
        waiting = true;
        retrievedRecords = retrieveAll ? await httpClient!.GetAll() : await httpClient!.GetByBestMatchedQueryPattern(searchModel);
        // retrievedRecords = retrieveAll ? await websocketClient!.GetAll() : await websocketClient!.GetByBestMatchedQueryPattern(searchModel);
        waiting = false;
        StateHasChanged();
    }    
    private void ShowReferencedRecords(XE_HR_EMP_DETAILS_VIEW_IR context)
    {
        referencesModel = context;        
    }
    private void ParsePrimaryKeyParameter()
    {
        //parse the primary key into the searchModel properties
    }
    protected override async Task OnInitializedAsync()
    {        
        await base.OnInitializedAsync();
        // await websocketClient!.InitializeAsync();
    }
    protected override async Task OnParametersSetAsync() 
    {
        if (!String.IsNullOrWhiteSpace(PrimaryKey))
        {
            ParsePrimaryKeyParameter();
            await Search();
        }
        await base.OnParametersSetAsync();
    }
    public void Dispose()
    {
        // websocketClient?.DisposeAsync();
        // websocketClient = null;
    }
}
