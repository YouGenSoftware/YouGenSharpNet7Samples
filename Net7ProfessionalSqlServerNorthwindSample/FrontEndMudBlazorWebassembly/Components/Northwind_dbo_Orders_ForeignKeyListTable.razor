<!-- **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200541 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 -->
<h4 Class="my-2">@modelName</h4>
<MudTable T="Northwind_dbo_Orders_IR" @ref="primaryTable" Height="250px"
        RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"
        Items="RetrievedRecords" HorizontalScrollbar="true" Hover="true"
        SortLabel="Sort By" Filter="new Func<Northwind_dbo_Orders_IR,Boolean>(FilterFuncAll)" FixedHeader="true">
    <ToolBarContent>
        <MudTextField @bind-Value="searchFilterText" Placeholder="Filter retrieved records" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
			<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.CustomerID!)">CustomerID</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.OrderDate!)">OrderDate</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.RequiredDate!)">RequiredDate</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.ShippedDate!)">ShippedDate</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.Freight!)">Freight</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.ShipName!)">ShipName</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.ShipAddress!)">ShipAddress</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.ShipCity!)">ShipCity</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.ShipRegion!)">ShipRegion</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.ShipPostalCode!)">ShipPostalCode</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Orders_IR, object>(x=>x.ShipCountry!)">ShipCountry</MudTableSortLabel></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="CustomerID">@context.CustomerID</MudTd>
			<MudTd DataLabel="OrderDate">@context.OrderDate</MudTd>
			<MudTd DataLabel="RequiredDate">@context.RequiredDate</MudTd>
			<MudTd DataLabel="ShippedDate">@context.ShippedDate</MudTd>
			<MudTd DataLabel="Freight">@context.Freight</MudTd>
			<MudTd DataLabel="ShipName">@context.ShipName</MudTd>
			<MudTd DataLabel="ShipAddress">@context.ShipAddress</MudTd>
			<MudTd DataLabel="ShipCity">@context.ShipCity</MudTd>
			<MudTd DataLabel="ShipRegion">@context.ShipRegion</MudTd>
			<MudTd DataLabel="ShipPostalCode">@context.ShipPostalCode</MudTd>
			<MudTd DataLabel="ShipCountry">@context.ShipCountry</MudTd>
		</RowTemplate>
</MudTable>
@code {
    [Parameter]
    public IEnumerable<Northwind_dbo_Orders_IR>? RetrievedRecords { get; set; }
    private String? _primaryKey;
    [Parameter]
    public String? PrimaryKey {
        get => _primaryKey;
        set
        {
            if (_primaryKey == value) return;
            _primaryKey = value;
            GetAndSelectMatchingRecord();
        }
    }
    private Northwind_dbo_Orders_IR? selectedItem { get; set; }
    [Parameter]
    public Northwind_dbo_Orders_IR? SelectedItem {
        get => selectedItem;
        set
        {
            if (selectedItem == value) return;
            selectedItem = value;
        }
    }
    [Parameter]
    public EventCallback<Northwind_dbo_Orders_IR?> SelectedItemChanged { get; set; }
	[Inject] Northwind_dbo_Orders_HttpClient? httpClient { get; set; }
	// [Inject] Northwind_dbo_Orders_SignalRWebsocketClient? websocketClient { get; set; }
    private MudTable<Northwind_dbo_Orders_IR>? primaryTable = new MudTable<Northwind_dbo_Orders_IR>();
    private Northwind_dbo_Orders_IR searchModel = new Northwind_dbo_Orders_IR();
    private String searchFilterText = "";
    private String modelName = "Northwind_dbo_Orders_IR";
    private Boolean FilterFuncAll(Northwind_dbo_Orders_IR element) => FilterFunc(element, searchFilterText);
    private Boolean FilterFunc(Northwind_dbo_Orders_IR element, String searchString)
    {
        if (String.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{ element.OrderID_IR } { element.CustomerID } { element.EmployeeID_IR } { element.OrderDate } { element.RequiredDate } { element.ShippedDate } { element.ShipVia_IR } { element.Freight } { element.ShipName } { element.ShipAddress } { element.ShipCity } { element.ShipRegion } { element.ShipPostalCode } { element.ShipCountry }".Contains(searchString))
           return true;
        return false;
    }
    private void RowClickEvent(TableRowClickEventArgs<Northwind_dbo_Orders_IR> tableRowClickEventArgs)
	{
	}
    private String SelectedRowClassFunc(Northwind_dbo_Orders_IR element, Int32 rowNumber)
    {
        if (primaryTable!.SelectedItem != null && primaryTable!.SelectedItem.Equals(element))
            return "selected";
        else
            return "";
    }
    private void SelectRowAdhoc(Northwind_dbo_Orders_IR matchedRecord)
    {
        if (primaryTable!.SelectedItem != null &&
            primaryTable.SelectedItem.PrimaryKeyHashedForUniqueObjectComparison != matchedRecord.PrimaryKeyHashedForUniqueObjectComparison)
            primaryTable.SetSelectedItem(primaryTable.Items!.First(x => x.PrimaryKeyHashedForUniqueObjectComparison == matchedRecord.PrimaryKeyHashedForUniqueObjectComparison));
    }  
    private async Task GetAndSelectMatchingRecord()
    {
        var matchedRecords = await httpClient!.GetByBestMatchedQueryPattern(searchModel);
        // var matchedRecords = await websocketlLient!.GetByBestMatchedQueryPattern(searchModel);
        if (matchedRecords!.Any())
            SelectRowAdhoc(matchedRecords!.First());
        StateHasChanged();
    }
    private void ParsePrimaryKeyParameter()
    {
        //parse the primary key into the searchModel properties
		var splitPrimaryKey = PrimaryKey!.Split((Char)27);
		searchModel.OrderID_IR = splitPrimaryKey[0];
    }
    protected override async Task OnInitializedAsync()
    {        
        await base.OnInitializedAsync();
    }
    protected override async Task OnParametersSetAsync() 
    {
        if (!String.IsNullOrWhiteSpace(PrimaryKey))
            ParsePrimaryKeyParameter();
        await base.OnParametersSetAsync();
    }
}
