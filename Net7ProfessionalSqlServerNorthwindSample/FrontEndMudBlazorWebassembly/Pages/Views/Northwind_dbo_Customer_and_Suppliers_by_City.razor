<!-- **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200541 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 -->
@implements IDisposable
@page "/views/Northwind_dbo_Customer_and_Suppliers_by_City/" 
@inherits ComponentBaseOverrider
<PageTitle>@modelName</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@modelName</MudText>
@if (waiting == true)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudText><strong>Data fetch filters</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudCard>
                    <MudCardContent>
                        <MudForm Model="@searchModel" @ref="@searchForm" Validation="@(() => searchValidator.ValidateValue)" ValidationDelay="0">
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="City"
	@bind-Value="@searchModel.City"
	For="@(() => searchModel.City)"
	Clearable="true"
	Lines="0"
	MaxLength="15"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="CompanyName"
	@bind-Value="@searchModel.CompanyName"
	For="@(() => searchModel.CompanyName)"
	Clearable="false"
	Lines="0"
	MaxLength="40"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="ContactName"
	@bind-Value="@searchModel.ContactName"
	For="@(() => searchModel.ContactName)"
	Clearable="true"
	Lines="0"
	MaxLength="30"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="Relationship"
	@bind-Value="@searchModel.Relationship"
	For="@(() => searchModel.Relationship)"
	Clearable="false"
	Lines="0"
	MaxLength="9"
	Immediate="true" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Search(retrieveAll: true))">Retrieve all records</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Search())">Retrieve records by criteria</MudButton>
                    </MudCardActions>
                </MudCard>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudTable T="Northwind_dbo_Customer_and_Suppliers_by_City_IR" @ref="primaryTable"
          RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"
          Items="retrievedRecords" HorizontalScrollbar="true" Hover="true"
          SortLabel="Sort By" Filter="new Func<Northwind_dbo_Customer_and_Suppliers_by_City_IR,Boolean>(FilterFuncAll)"
          Virtualize="true" FixedHeader="true">
        <ToolBarContent>
            <MudTextField @bind-Value="searchFilterText" Placeholder="Filter retrieved records" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
			<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Customer_and_Suppliers_by_City_IR, object>(x=>x.City!)">City</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Customer_and_Suppliers_by_City_IR, object>(x=>x.CompanyName!)">CompanyName</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Customer_and_Suppliers_by_City_IR, object>(x=>x.ContactName!)">ContactName</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Customer_and_Suppliers_by_City_IR, object>(x=>x.Relationship!)">Relationship</MudTableSortLabel></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="City">@context.City</MudTd>
			<MudTd DataLabel="CompanyName">@context.CompanyName</MudTd>
			<MudTd DataLabel="ContactName">@context.ContactName</MudTd>
			<MudTd DataLabel="Relationship">@context.Relationship</MudTd>
		</RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 50}" />
        </PagerContent>
    </MudTable>   
}
@code {
    [Parameter]
    public String? PrimaryKey { get; set; }
	[Inject] Northwind_dbo_Customer_and_Suppliers_by_City_HttpClient? httpClient { get; set; }
	// [Inject] Northwind_dbo_Customer_and_Suppliers_by_City_SignalRWebsocketClient? websocketClient { get; set; }
    [Inject]
    private Northwind_dbo_Customer_and_Suppliers_by_City_IR_FluentValidator searchValidator { get; set; } = default!;
    private MudForm? searchForm = new MudForm();
    private MudTable<Northwind_dbo_Customer_and_Suppliers_by_City_IR>? primaryTable = new MudTable<Northwind_dbo_Customer_and_Suppliers_by_City_IR>();
    private String searchFilterText = "";
    private Int32 selectedRowNumber = -1;
    private Northwind_dbo_Customer_and_Suppliers_by_City_IR searchModel = new Northwind_dbo_Customer_and_Suppliers_by_City_IR();
    private Northwind_dbo_Customer_and_Suppliers_by_City_IR referencesModel = new Northwind_dbo_Customer_and_Suppliers_by_City_IR();
    private IEnumerable<Northwind_dbo_Customer_and_Suppliers_by_City_IR>? retrievedRecords;
    private String modelName = "Northwind_dbo_Customer_and_Suppliers_by_City_IR";
    private Boolean waiting;
    private Boolean FilterFuncAll(Northwind_dbo_Customer_and_Suppliers_by_City_IR element) => FilterFunc(element, searchFilterText);
    private Boolean FilterFunc(Northwind_dbo_Customer_and_Suppliers_by_City_IR element, String searchString)
    {
        if (String.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{ element.City } { element.CompanyName } { element.ContactName } { element.Relationship }".Contains(searchString))
           return true;
        return false;
    }
    private void RowClickEvent(TableRowClickEventArgs<Northwind_dbo_Customer_and_Suppliers_by_City_IR> tableRowClickEventArgs)
	{
	}
    private String SelectedRowClassFunc(Northwind_dbo_Customer_and_Suppliers_by_City_IR element, Int32 rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return String.Empty;
        }
        else if (primaryTable!.SelectedItem != null && primaryTable!.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return String.Empty;
        }
    }
    private async Task Search(Boolean retrieveAll = false)
    {
        if (!retrieveAll)
            await searchForm!.Validate();
        if (!retrieveAll && !searchForm!.IsValid)
            return;
        waiting = true;
        retrievedRecords = retrieveAll ? await httpClient!.GetAll() : await httpClient!.GetByBestMatchedQueryPattern(searchModel);
        // retrievedRecords = retrieveAll ? await websocketClient!.GetAll() : await websocketClient!.GetByBestMatchedQueryPattern(searchModel);
        waiting = false;
        StateHasChanged();
    }    
    private void ShowReferencedRecords(Northwind_dbo_Customer_and_Suppliers_by_City_IR context)
    {
        referencesModel = context;        
    }
    private void ParsePrimaryKeyParameter()
    {
        //parse the primary key into the searchModel properties
    }
    protected override async Task OnInitializedAsync()
    {        
        await base.OnInitializedAsync();
        // await websocketClient!.InitializeAsync();
    }
    protected override async Task OnParametersSetAsync() 
    {
        if (!String.IsNullOrWhiteSpace(PrimaryKey))
        {
            ParsePrimaryKeyParameter();
            await Search();
        }
        await base.OnParametersSetAsync();
    }
    public void Dispose()
    {
        // websocketClient?.DisposeAsync();
        // websocketClient = null;
    }
}
