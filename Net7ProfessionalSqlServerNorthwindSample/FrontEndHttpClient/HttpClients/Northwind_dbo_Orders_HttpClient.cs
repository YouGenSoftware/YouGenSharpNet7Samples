/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200541 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.WebUtilities;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Northwind_Common.IndirectReferenceTransformerModels;
namespace Northwind_FrontEndHttpClient.HttpClients;
public class Northwind_dbo_Orders_HttpClient : HttpClientBase, INorthwind_dbo_Orders_HttpClient
{
	public Northwind_dbo_Orders_HttpClient(HttpClient httpClient) : base(httpClient)
    {            
    }
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByBestMatchedQueryPattern(Northwind_dbo_Orders_IR input)
	{
		if (input == null) return null;
		IEnumerable<Northwind_dbo_Orders_IR>? retData;
		if (input.CustomerID_HasBeenChanged) retData = await GetByCustomerID(input.CustomerID);
		else if (input.EmployeeID_IR_HasBeenChanged) retData = await GetByEmployeeID(input.EmployeeID_IR);
		else if (input.OrderDate_HasBeenChanged) retData = await GetByOrderDate(input.OrderDate);
		else if (input.OrderID_IR_HasBeenChanged) retData = await GetByOrderID(input.OrderID_IR ?? default);
		else if (input.ShippedDate_HasBeenChanged) retData = await GetByShippedDate(input.ShippedDate);
		else if (input.ShipVia_IR_HasBeenChanged) retData = await GetByShipVia(input.ShipVia_IR);
		else if (input.ShipPostalCode_HasBeenChanged) retData = await GetByShipPostalCode(input.ShipPostalCode);
		else retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(Northwind_dbo_Orders_IR record, Northwind_dbo_Orders_IR filter)
	{
		 // unencrypted properties only
		return			(!filter.OrderDate_HasBeenChanged || record.OrderDate == filter.OrderDate) &&
			(!filter.RequiredDate_HasBeenChanged || record.RequiredDate == filter.RequiredDate) &&
			(!filter.ShippedDate_HasBeenChanged || record.ShippedDate == filter.ShippedDate) &&
			(!filter.ShipName_HasBeenChanged || record.ShipName == filter.ShipName) &&
			(!filter.ShipAddress_HasBeenChanged || record.ShipAddress == filter.ShipAddress) &&
			(!filter.ShipCity_HasBeenChanged || record.ShipCity == filter.ShipCity) &&
			(!filter.ShipRegion_HasBeenChanged || record.ShipRegion == filter.ShipRegion) &&
			(!filter.ShipPostalCode_HasBeenChanged || record.ShipPostalCode == filter.ShipPostalCode) &&
			(!filter.ShipCountry_HasBeenChanged || record.ShipCountry == filter.ShipCountry);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetAll()
	{
		var result = await _httpClient.GetAsync(_httpClient.BaseAddress!.ToString() + "Northwind_dbo_Orders/GetAll");
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByCustomerID(String? customerID)
	{
		var uri = GetUriForParamsCustomerID("Northwind_dbo_Orders/GetByCustomerID", customerID);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByEmployeeID(String? employeeID_IR)
	{
		var uri = GetUriForParamsEmployeeID("Northwind_dbo_Orders/GetByEmployeeID", employeeID_IR);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByOrderDate(DateTime? orderDate)
	{
		var uri = GetUriForParamsOrderDate("Northwind_dbo_Orders/GetByOrderDate", orderDate);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByOrderID(String? orderID_IR)
	{
		var uri = GetUriForParamsOrderID("Northwind_dbo_Orders/GetByOrderID", orderID_IR);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByShippedDate(DateTime? shippedDate)
	{
		var uri = GetUriForParamsShippedDate("Northwind_dbo_Orders/GetByShippedDate", shippedDate);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByShipVia(String? shipVia_IR)
	{
		var uri = GetUriForParamsShipVia("Northwind_dbo_Orders/GetByShipVia", shipVia_IR);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> GetByShipPostalCode(String? shipPostalCode)
	{
		var uri = GetUriForParamsShipPostalCode("Northwind_dbo_Orders/GetByShipPostalCode", shipPostalCode);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Orders_IR>?>(content, _jsonSerializationSettings);
	}
	public async Task<Northwind_dbo_Orders_IR?> Create(Northwind_dbo_Orders_IR input)
	{
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PostAsync(_httpClient.BaseAddress!.ToString() + "Northwind_dbo_Orders/Create", new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<Northwind_dbo_Orders_IR?>(content, _jsonSerializationSettings);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, Northwind_dbo_Orders_IR updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByOrderID(inputSplits[0], updateModel);
	}
	public async Task UpdateByCustomerID(String? customerID, Northwind_dbo_Orders_IR input)
	{
		var uri = GetUriForParamsCustomerID("Northwind_dbo_Orders/UpdateByCustomerID", customerID);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByEmployeeID(String? employeeID_IR, Northwind_dbo_Orders_IR input)
	{
		var uri = GetUriForParamsEmployeeID("Northwind_dbo_Orders/UpdateByEmployeeID", employeeID_IR);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByOrderDate(DateTime? orderDate, Northwind_dbo_Orders_IR input)
	{
		var uri = GetUriForParamsOrderDate("Northwind_dbo_Orders/UpdateByOrderDate", orderDate);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByOrderID(String? orderID_IR, Northwind_dbo_Orders_IR input)
	{
		var uri = GetUriForParamsOrderID("Northwind_dbo_Orders/UpdateByOrderID", orderID_IR);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByShippedDate(DateTime? shippedDate, Northwind_dbo_Orders_IR input)
	{
		var uri = GetUriForParamsShippedDate("Northwind_dbo_Orders/UpdateByShippedDate", shippedDate);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByShipVia(String? shipVia_IR, Northwind_dbo_Orders_IR input)
	{
		var uri = GetUriForParamsShipVia("Northwind_dbo_Orders/UpdateByShipVia", shipVia_IR);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByShipPostalCode(String? shipPostalCode, Northwind_dbo_Orders_IR input)
	{
		var uri = GetUriForParamsShipPostalCode("Northwind_dbo_Orders/UpdateByShipPostalCode", shipPostalCode);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByOrderID(inputSplits[0]);
	}
	public async Task DeleteByCustomerID(String? customerID)
	{
		var uri = GetUriForParamsCustomerID("Northwind_dbo_Orders/DeleteByCustomerID", customerID);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByEmployeeID(String? employeeID_IR)
	{
		var uri = GetUriForParamsEmployeeID("Northwind_dbo_Orders/DeleteByEmployeeID", employeeID_IR);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByOrderDate(DateTime? orderDate)
	{
		var uri = GetUriForParamsOrderDate("Northwind_dbo_Orders/DeleteByOrderDate", orderDate);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByOrderID(String? orderID_IR)
	{
		var uri = GetUriForParamsOrderID("Northwind_dbo_Orders/DeleteByOrderID", orderID_IR);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByShippedDate(DateTime? shippedDate)
	{
		var uri = GetUriForParamsShippedDate("Northwind_dbo_Orders/DeleteByShippedDate", shippedDate);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByShipVia(String? shipVia_IR)
	{
		var uri = GetUriForParamsShipVia("Northwind_dbo_Orders/DeleteByShipVia", shipVia_IR);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByShipPostalCode(String? shipPostalCode)
	{
		var uri = GetUriForParamsShipPostalCode("Northwind_dbo_Orders/DeleteByShipPostalCode", shipPostalCode);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	private String GetUriForParamsCustomerID(String path, String? customerID)
	{
		var query = new Dictionary<String,String>();
		query["customerID"] = customerID ?? String.Empty;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsEmployeeID(String path, String? employeeID_IR)
	{
		var query = new Dictionary<String,String>();
		query["employeeID_IR"] = employeeID_IR ?? String.Empty;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsOrderDate(String path, DateTime? orderDate)
	{
		var query = new Dictionary<String,String>();
		query["orderDate"] = orderDate.ToString() ?? new DateTime().ToString();
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsOrderID(String path, String? orderID_IR)
	{
		var query = new Dictionary<String,String>();
		query["orderID_IR"] = orderID_IR ?? String.Empty;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsShippedDate(String path, DateTime? shippedDate)
	{
		var query = new Dictionary<String,String>();
		query["shippedDate"] = shippedDate.ToString() ?? new DateTime().ToString();
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsShipVia(String path, String? shipVia_IR)
	{
		var query = new Dictionary<String,String>();
		query["shipVia_IR"] = shipVia_IR ?? String.Empty;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsShipPostalCode(String path, String? shipPostalCode)
	{
		var query = new Dictionary<String,String>();
		query["shipPostalCode"] = shipPostalCode ?? String.Empty;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
}
