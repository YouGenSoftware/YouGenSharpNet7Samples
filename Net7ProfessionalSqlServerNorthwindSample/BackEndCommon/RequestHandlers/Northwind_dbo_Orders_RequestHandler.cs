/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200541 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Northwind_Common.IndirectReferenceTransformerModels;
using Northwind_BackEndDatabaseClient.Repositories;
using Northwind_Common.Validators;
using Northwind_BackEndCommon.IndirectReferenceTransformers;
using Northwind_BackEndCommon.Services;
namespace Northwind_BackEndCommon.RequestHandlers;
public class Northwind_dbo_Orders_RequestHandler : INorthwind_dbo_Orders_RequestHandler
{
    private readonly ILogger<Northwind_dbo_Orders_RequestHandler> _logger;
    private readonly IEncryptionDecryptionService _encryptionDecryptionService; 
    private readonly IIRTransformers _indirectReferenceTransformers;
    private readonly INorthwind_dbo_Orders_Repository _repository;
    private readonly Northwind_dbo_Orders_IR_FluentValidator_Create _createValidator;
    private readonly Northwind_dbo_Orders_IR_FluentValidator_Read _readValidator;
    private readonly Northwind_dbo_Orders_IR_FluentValidator_Update _updateValidator;
    private readonly Northwind_dbo_Orders_IR_FluentValidator_Delete _deleteValidator;
    public Northwind_dbo_Orders_RequestHandler(
        ILogger<Northwind_dbo_Orders_RequestHandler> logger
        ,IEncryptionDecryptionService encryptionDecryptionService
        ,IIRTransformers indirectReferenceTransformers
        ,INorthwind_dbo_Orders_Repository repository 
        ,Northwind_dbo_Orders_IR_FluentValidator_Create createValidator
        ,Northwind_dbo_Orders_IR_FluentValidator_Read readValidator
        ,Northwind_dbo_Orders_IR_FluentValidator_Update updateValidator
        ,Northwind_dbo_Orders_IR_FluentValidator_Delete deleteValidator
    )
    {
        _logger = logger;
        _encryptionDecryptionService = encryptionDecryptionService;
        _indirectReferenceTransformers = indirectReferenceTransformers;
        _repository = repository;
        _createValidator = createValidator;
        _readValidator = readValidator;
        _updateValidator = updateValidator;
        _deleteValidator = deleteValidator;
    }
	//Main Handlers
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetAll()
	{
		await PreHandleGetAll();
		var retData = await _repository.GetAll();
		await PostHandleGetAll();
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetByCustomerID(String? customerID)
	{
		await PreHandleGetByCustomerID(customerID);
		var retData = await _repository.GetByCustomerID((customerID));
		await PostHandleGetByCustomerID(customerID);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetByEmployeeID(String? employeeID_IR)
	{
		await PreHandleGetByEmployeeID(employeeID_IR);
		var retData = await _repository.GetByEmployeeID(_encryptionDecryptionService.DecInt32Nullable(employeeID_IR));
		await PostHandleGetByEmployeeID(employeeID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetByOrderDate(DateTime? orderDate)
	{
		await PreHandleGetByOrderDate(orderDate);
		var retData = await _repository.GetByOrderDate((orderDate));
		await PostHandleGetByOrderDate(orderDate);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetByOrderID(String? orderID_IR)
	{
		await PreHandleGetByOrderID(orderID_IR);
		var retData = await _repository.GetByOrderID(_encryptionDecryptionService.DecInt32(orderID_IR));
		await PostHandleGetByOrderID(orderID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetByShippedDate(DateTime? shippedDate)
	{
		await PreHandleGetByShippedDate(shippedDate);
		var retData = await _repository.GetByShippedDate((shippedDate));
		await PostHandleGetByShippedDate(shippedDate);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetByShipVia(String? shipVia_IR)
	{
		await PreHandleGetByShipVia(shipVia_IR);
		var retData = await _repository.GetByShipVia(_encryptionDecryptionService.DecInt32Nullable(shipVia_IR));
		await PostHandleGetByShipVia(shipVia_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Orders_IR>?> HandleGetByShipPostalCode(String? shipPostalCode)
	{
		await PreHandleGetByShipPostalCode(shipPostalCode);
		var retData = await _repository.GetByShipPostalCode((shipPostalCode));
		await PostHandleGetByShipPostalCode(shipPostalCode);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Orders_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<Northwind_dbo_Orders_IR?> HandleCreate<T>(T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleCreate(irModel);
		entity = await _repository.Create(entity!);
		if (entity != null) 
		{
			await PostHandleCreate(irModel);
			return _indirectReferenceTransformers.ToIndirectModel(entity!);
		}
		else
			return null;
	}
	public async Task HandleUpdateByCustomerID<T>(String? customerID, T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByCustomerID(customerID, irModel);
		await _repository.UpdateByCustomerID((customerID), entity!);
		await PostHandleUpdateByCustomerID(customerID, irModel);
	}
	public async Task HandleUpdateByEmployeeID<T>(String? employeeID_IR, T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByEmployeeID(employeeID_IR, irModel);
		await _repository.UpdateByEmployeeID(_encryptionDecryptionService.DecInt32Nullable(employeeID_IR), entity!);
		await PostHandleUpdateByEmployeeID(employeeID_IR, irModel);
	}
	public async Task HandleUpdateByOrderDate<T>(DateTime? orderDate, T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByOrderDate(orderDate, irModel);
		await _repository.UpdateByOrderDate((orderDate), entity!);
		await PostHandleUpdateByOrderDate(orderDate, irModel);
	}
	public async Task HandleUpdateByOrderID<T>(String? orderID_IR, T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByOrderID(orderID_IR, irModel);
		await _repository.UpdateByOrderID(_encryptionDecryptionService.DecInt32(orderID_IR), entity!);
		await PostHandleUpdateByOrderID(orderID_IR, irModel);
	}
	public async Task HandleUpdateByShippedDate<T>(DateTime? shippedDate, T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByShippedDate(shippedDate, irModel);
		await _repository.UpdateByShippedDate((shippedDate), entity!);
		await PostHandleUpdateByShippedDate(shippedDate, irModel);
	}
	public async Task HandleUpdateByShipVia<T>(String? shipVia_IR, T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByShipVia(shipVia_IR, irModel);
		await _repository.UpdateByShipVia(_encryptionDecryptionService.DecInt32Nullable(shipVia_IR), entity!);
		await PostHandleUpdateByShipVia(shipVia_IR, irModel);
	}
	public async Task HandleUpdateByShipPostalCode<T>(String? shipPostalCode, T irModel) where T : Northwind_dbo_Orders_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByShipPostalCode(shipPostalCode, irModel);
		await _repository.UpdateByShipPostalCode((shipPostalCode), entity!);
		await PostHandleUpdateByShipPostalCode(shipPostalCode, irModel);
	}
	public async Task HandleDeleteByCustomerID(String? customerID)
	{
		await PreHandleDeleteByCustomerID(customerID);
		await _repository.DeleteByCustomerID((customerID));
		await PostHandleDeleteByCustomerID(customerID);
	}
	public async Task HandleDeleteByEmployeeID(String? employeeID_IR)
	{
		await PreHandleDeleteByEmployeeID(employeeID_IR);
		await _repository.DeleteByEmployeeID(_encryptionDecryptionService.DecInt32Nullable(employeeID_IR));
		await PostHandleDeleteByEmployeeID(employeeID_IR);
	}
	public async Task HandleDeleteByOrderDate(DateTime? orderDate)
	{
		await PreHandleDeleteByOrderDate(orderDate);
		await _repository.DeleteByOrderDate((orderDate));
		await PostHandleDeleteByOrderDate(orderDate);
	}
	public async Task HandleDeleteByOrderID(String? orderID_IR)
	{
		await PreHandleDeleteByOrderID(orderID_IR);
		await _repository.DeleteByOrderID(_encryptionDecryptionService.DecInt32(orderID_IR));
		await PostHandleDeleteByOrderID(orderID_IR);
	}
	public async Task HandleDeleteByShippedDate(DateTime? shippedDate)
	{
		await PreHandleDeleteByShippedDate(shippedDate);
		await _repository.DeleteByShippedDate((shippedDate));
		await PostHandleDeleteByShippedDate(shippedDate);
	}
	public async Task HandleDeleteByShipVia(String? shipVia_IR)
	{
		await PreHandleDeleteByShipVia(shipVia_IR);
		await _repository.DeleteByShipVia(_encryptionDecryptionService.DecInt32Nullable(shipVia_IR));
		await PostHandleDeleteByShipVia(shipVia_IR);
	}
	public async Task HandleDeleteByShipPostalCode(String? shipPostalCode)
	{
		await PreHandleDeleteByShipPostalCode(shipPostalCode);
		await _repository.DeleteByShipPostalCode((shipPostalCode));
		await PostHandleDeleteByShipPostalCode(shipPostalCode);
	}
	//PreCRUD Handlers
	private async Task PreHandleGetAll()
	{
		// Add preCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PreHandleGetByCustomerID(String? customerID)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.CustomerID = customerID;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByEmployeeID(String? employeeID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.EmployeeID_IR = employeeID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByOrderDate(DateTime? orderDate)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.OrderDate = orderDate;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByOrderID(String? orderID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.OrderID_IR = orderID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByShippedDate(DateTime? shippedDate)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShippedDate = shippedDate;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByShipVia(String? shipVia_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShipVia_IR = shipVia_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByShipPostalCode(String? shipPostalCode)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShipPostalCode = shipPostalCode;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleCreate(Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		await _createValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByCustomerID(String? customerID, Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.CustomerID = customerID;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByEmployeeID(String? employeeID_IR, Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.EmployeeID_IR = employeeID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByOrderDate(DateTime? orderDate, Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.OrderDate = orderDate;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByOrderID(String? orderID_IR, Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.OrderID_IR = orderID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByShippedDate(DateTime? shippedDate, Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShippedDate = shippedDate;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByShipVia(String? shipVia_IR, Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShipVia_IR = shipVia_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByShipPostalCode(String? shipPostalCode, Northwind_dbo_Orders_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShipPostalCode = shipPostalCode;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleDeleteByCustomerID(String? customerID)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.CustomerID = customerID;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByEmployeeID(String? employeeID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.EmployeeID_IR = employeeID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByOrderDate(DateTime? orderDate)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.OrderDate = orderDate;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByOrderID(String? orderID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.OrderID_IR = orderID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByShippedDate(DateTime? shippedDate)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShippedDate = shippedDate;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByShipVia(String? shipVia_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShipVia_IR = shipVia_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByShipPostalCode(String? shipPostalCode)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Orders_IR();
		selectorProperties.ShipPostalCode = shipPostalCode;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	//PostCRUD Handlers
	private async Task PostHandleGetAll()
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByCustomerID(String? customerID)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByEmployeeID(String? employeeID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByOrderDate(DateTime? orderDate)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByOrderID(String? orderID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByShippedDate(DateTime? shippedDate)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByShipVia(String? shipVia_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByShipPostalCode(String? shipPostalCode)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleCreate(Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByCustomerID(String? customerID, Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByEmployeeID(String? employeeID_IR, Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByOrderDate(DateTime? orderDate, Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByOrderID(String? orderID_IR, Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByShippedDate(DateTime? shippedDate, Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByShipVia(String? shipVia_IR, Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByShipPostalCode(String? shipPostalCode, Northwind_dbo_Orders_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByCustomerID(String? customerID)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByEmployeeID(String? employeeID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByOrderDate(DateTime? orderDate)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByOrderID(String? orderID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByShippedDate(DateTime? shippedDate)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByShipVia(String? shipVia_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByShipPostalCode(String? shipPostalCode)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
}
