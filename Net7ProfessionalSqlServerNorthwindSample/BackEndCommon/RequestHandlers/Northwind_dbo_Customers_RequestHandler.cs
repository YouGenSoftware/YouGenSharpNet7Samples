/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200541 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Northwind_Common.IndirectReferenceTransformerModels;
using Northwind_BackEndDatabaseClient.Repositories;
using Northwind_Common.Validators;
using Northwind_BackEndCommon.IndirectReferenceTransformers;
using Northwind_BackEndCommon.Services;
namespace Northwind_BackEndCommon.RequestHandlers;
public class Northwind_dbo_Customers_RequestHandler : INorthwind_dbo_Customers_RequestHandler
{
    private readonly ILogger<Northwind_dbo_Customers_RequestHandler> _logger;
    private readonly IEncryptionDecryptionService _encryptionDecryptionService; 
    private readonly IIRTransformers _indirectReferenceTransformers;
    private readonly INorthwind_dbo_Customers_Repository _repository;
    private readonly Northwind_dbo_Customers_IR_FluentValidator_Create _createValidator;
    private readonly Northwind_dbo_Customers_IR_FluentValidator_Read _readValidator;
    private readonly Northwind_dbo_Customers_IR_FluentValidator_Update _updateValidator;
    private readonly Northwind_dbo_Customers_IR_FluentValidator_Delete _deleteValidator;
    public Northwind_dbo_Customers_RequestHandler(
        ILogger<Northwind_dbo_Customers_RequestHandler> logger
        ,IEncryptionDecryptionService encryptionDecryptionService
        ,IIRTransformers indirectReferenceTransformers
        ,INorthwind_dbo_Customers_Repository repository 
        ,Northwind_dbo_Customers_IR_FluentValidator_Create createValidator
        ,Northwind_dbo_Customers_IR_FluentValidator_Read readValidator
        ,Northwind_dbo_Customers_IR_FluentValidator_Update updateValidator
        ,Northwind_dbo_Customers_IR_FluentValidator_Delete deleteValidator
    )
    {
        _logger = logger;
        _encryptionDecryptionService = encryptionDecryptionService;
        _indirectReferenceTransformers = indirectReferenceTransformers;
        _repository = repository;
        _createValidator = createValidator;
        _readValidator = readValidator;
        _updateValidator = updateValidator;
        _deleteValidator = deleteValidator;
    }
	//Main Handlers
	public async Task<IEnumerable<Northwind_dbo_Customers_IR>?> HandleGetAll()
	{
		await PreHandleGetAll();
		var retData = await _repository.GetAll();
		await PostHandleGetAll();
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Customers_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Customers_IR>?> HandleGetByCity(String? city)
	{
		await PreHandleGetByCity(city);
		var retData = await _repository.GetByCity((city));
		await PostHandleGetByCity(city);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Customers_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Customers_IR>?> HandleGetByCompanyName(String companyName)
	{
		await PreHandleGetByCompanyName(companyName);
		var retData = await _repository.GetByCompanyName((companyName));
		await PostHandleGetByCompanyName(companyName);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Customers_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Customers_IR>?> HandleGetByCustomerID(String customerID)
	{
		await PreHandleGetByCustomerID(customerID);
		var retData = await _repository.GetByCustomerID((customerID));
		await PostHandleGetByCustomerID(customerID);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Customers_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Customers_IR>?> HandleGetByPostalCode(String? postalCode)
	{
		await PreHandleGetByPostalCode(postalCode);
		var retData = await _repository.GetByPostalCode((postalCode));
		await PostHandleGetByPostalCode(postalCode);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Customers_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Customers_IR>?> HandleGetByRegion(String? region)
	{
		await PreHandleGetByRegion(region);
		var retData = await _repository.GetByRegion((region));
		await PostHandleGetByRegion(region);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Customers_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<Northwind_dbo_Customers_IR?> HandleCreate<T>(T irModel) where T : Northwind_dbo_Customers_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleCreate(irModel);
		entity = await _repository.Create(entity!);
		if (entity != null) 
		{
			await PostHandleCreate(irModel);
			return _indirectReferenceTransformers.ToIndirectModel(entity!);
		}
		else
			return null;
	}
	public async Task HandleUpdateByCity<T>(String? city, T irModel) where T : Northwind_dbo_Customers_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByCity(city, irModel);
		await _repository.UpdateByCity((city), entity!);
		await PostHandleUpdateByCity(city, irModel);
	}
	public async Task HandleUpdateByCompanyName<T>(String companyName, T irModel) where T : Northwind_dbo_Customers_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByCompanyName(companyName, irModel);
		await _repository.UpdateByCompanyName((companyName), entity!);
		await PostHandleUpdateByCompanyName(companyName, irModel);
	}
	public async Task HandleUpdateByCustomerID<T>(String customerID, T irModel) where T : Northwind_dbo_Customers_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByCustomerID(customerID, irModel);
		await _repository.UpdateByCustomerID((customerID), entity!);
		await PostHandleUpdateByCustomerID(customerID, irModel);
	}
	public async Task HandleUpdateByPostalCode<T>(String? postalCode, T irModel) where T : Northwind_dbo_Customers_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByPostalCode(postalCode, irModel);
		await _repository.UpdateByPostalCode((postalCode), entity!);
		await PostHandleUpdateByPostalCode(postalCode, irModel);
	}
	public async Task HandleUpdateByRegion<T>(String? region, T irModel) where T : Northwind_dbo_Customers_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByRegion(region, irModel);
		await _repository.UpdateByRegion((region), entity!);
		await PostHandleUpdateByRegion(region, irModel);
	}
	public async Task HandleDeleteByCity(String? city)
	{
		await PreHandleDeleteByCity(city);
		await _repository.DeleteByCity((city));
		await PostHandleDeleteByCity(city);
	}
	public async Task HandleDeleteByCompanyName(String companyName)
	{
		await PreHandleDeleteByCompanyName(companyName);
		await _repository.DeleteByCompanyName((companyName));
		await PostHandleDeleteByCompanyName(companyName);
	}
	public async Task HandleDeleteByCustomerID(String customerID)
	{
		await PreHandleDeleteByCustomerID(customerID);
		await _repository.DeleteByCustomerID((customerID));
		await PostHandleDeleteByCustomerID(customerID);
	}
	public async Task HandleDeleteByPostalCode(String? postalCode)
	{
		await PreHandleDeleteByPostalCode(postalCode);
		await _repository.DeleteByPostalCode((postalCode));
		await PostHandleDeleteByPostalCode(postalCode);
	}
	public async Task HandleDeleteByRegion(String? region)
	{
		await PreHandleDeleteByRegion(region);
		await _repository.DeleteByRegion((region));
		await PostHandleDeleteByRegion(region);
	}
	//PreCRUD Handlers
	private async Task PreHandleGetAll()
	{
		// Add preCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PreHandleGetByCity(String? city)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.City = city;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByCompanyName(String companyName)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.CompanyName = companyName;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByCustomerID(String customerID)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.CustomerID = customerID;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByPostalCode(String? postalCode)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.PostalCode = postalCode;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByRegion(String? region)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.Region = region;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleCreate(Northwind_dbo_Customers_IR irModel)
	{
		// Add preCRUD calls/events
		await _createValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByCity(String? city, Northwind_dbo_Customers_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.City = city;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByCompanyName(String companyName, Northwind_dbo_Customers_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.CompanyName = companyName;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByCustomerID(String customerID, Northwind_dbo_Customers_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.CustomerID = customerID;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByPostalCode(String? postalCode, Northwind_dbo_Customers_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.PostalCode = postalCode;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByRegion(String? region, Northwind_dbo_Customers_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.Region = region;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleDeleteByCity(String? city)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.City = city;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByCompanyName(String companyName)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.CompanyName = companyName;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByCustomerID(String customerID)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.CustomerID = customerID;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByPostalCode(String? postalCode)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.PostalCode = postalCode;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByRegion(String? region)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Customers_IR();
		selectorProperties.Region = region;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	//PostCRUD Handlers
	private async Task PostHandleGetAll()
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByCity(String? city)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByCompanyName(String companyName)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByCustomerID(String customerID)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByPostalCode(String? postalCode)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByRegion(String? region)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleCreate(Northwind_dbo_Customers_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByCity(String? city, Northwind_dbo_Customers_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByCompanyName(String companyName, Northwind_dbo_Customers_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByCustomerID(String customerID, Northwind_dbo_Customers_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByPostalCode(String? postalCode, Northwind_dbo_Customers_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByRegion(String? region, Northwind_dbo_Customers_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByCity(String? city)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByCompanyName(String companyName)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByCustomerID(String customerID)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByPostalCode(String? postalCode)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByRegion(String? region)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
}
