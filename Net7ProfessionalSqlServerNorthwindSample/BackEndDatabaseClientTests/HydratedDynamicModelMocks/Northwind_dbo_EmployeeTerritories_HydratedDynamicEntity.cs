/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200541 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Professional Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Tynamix.ObjectFiller;
using Northwind_BackEndSqlEntities.Entities;
namespace Northwind_BackEndDatabaseClientTests.HydratedDynamicEntities;
public partial class Northwind_HydratedDynamicEntities  : Northwind_HydratedDynamicEntitiesBase
{
	protected Filler<Northwind_dbo_EmployeeTerritories> _Northwind_dbo_EmployeeTerritories_Filler = new Filler<Northwind_dbo_EmployeeTerritories>();
	protected FillerSetup? _Northwind_dbo_EmployeeTerritories_FillerSetup;
	public FillerSetup GetNorthwind_dbo_EmployeeTerritories_FillerSetup(Boolean onlyFillExplicitlyNamedProperties, 
		Boolean fillPrimaryKey = false)
	{
		if (_Northwind_dbo_EmployeeTerritories_FillerSetup != null)
			return _Northwind_dbo_EmployeeTerritories_FillerSetup;
		_Northwind_dbo_EmployeeTerritories_FillerSetup = _Northwind_dbo_EmployeeTerritories_Filler.Setup(onlyFillExplicitlyNamedProperties)
		.OnProperty(x => x.EmployeeID).Use(() => (fillPrimaryKey ? Convert.ToInt32(1) : 0))
		.OnProperty(x => x.TerritoryID).Use(() => (fillPrimaryKey ? new String(Enumerable.Repeat(_chars, Convert.ToInt32(20)).Select(s => s[Random.Shared.Next(s.Length)]).ToArray()) : String.Empty))
		// Foreign key entities
		.OnProperty(x => x.FK_EmployeeTerritories_Employees_Ref).IgnoreIt()
		.OnProperty(x => x.FK_EmployeeTerritories_Territories_Ref).IgnoreIt()
		.Result;
		return _Northwind_dbo_EmployeeTerritories_FillerSetup;
	}
	public Northwind_dbo_EmployeeTerritories GetHydratedDynamicNorthwind_dbo_EmployeeTerritories(Boolean onlyFillExplicitlyNamedProperties = true, 
		Boolean fillPrimaryKey = false,	
		Boolean fillInnerForeignKeys = false, 
		Boolean fillInnerPrimaryKeyReferencedBy = false)
	{
		return GetHydratedDynamicIEnumerableOfNorthwind_dbo_EmployeeTerritories(1,
			onlyFillExplicitlyNamedProperties, 
			fillPrimaryKey, 
			fillInnerForeignKeys, 
			fillInnerPrimaryKeyReferencedBy).First();
	}
	public IEnumerable<Northwind_dbo_EmployeeTerritories> GetHydratedDynamicIEnumerableOfNorthwind_dbo_EmployeeTerritories(Int32 numberToCreate, 
		Boolean onlyFillExplicitlyNamedProperties = true, 
		Boolean fillPrimaryKey = false, 
		Boolean fillInnerForeignKeys = false, 
		Boolean fillInnerPrimaryKeyReferencedBy = false)
	{
		_Northwind_dbo_EmployeeTerritories_Filler.Setup(GetNorthwind_dbo_EmployeeTerritories_FillerSetup(onlyFillExplicitlyNamedProperties, fillPrimaryKey));
		var retObjects = _Northwind_dbo_EmployeeTerritories_Filler.Create(numberToCreate);
		if (fillInnerForeignKeys) FillInnerForeignKeys(retObjects);
        if (fillInnerPrimaryKeyReferencedBy) FillInnerPrimaryKeyReferencedBy(retObjects);
		return retObjects;
	}
	private void FillInnerForeignKeys(IEnumerable<Northwind_dbo_EmployeeTerritories> entities)
	{
		foreach (var entity in entities)
		{
			entity.FK_EmployeeTerritories_Employees_Ref = GetHydratedDynamicNorthwind_dbo_Employees();
			entity.FK_EmployeeTerritories_Territories_Ref = GetHydratedDynamicNorthwind_dbo_Territories();
		}
	}
	private void FillInnerPrimaryKeyReferencedBy(IEnumerable<Northwind_dbo_EmployeeTerritories> entities)
	{
		foreach (var entity in entities)
		{
		}
	}
}
