/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200434 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Standard Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.WebUtilities;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Northwind_BackEndSqlEntities.Entities;
namespace Northwind_FrontEndHttpClient.HttpClients;
public class Northwind_dbo_Employees_HttpClient : HttpClientBase, INorthwind_dbo_Employees_HttpClient
{
	public Northwind_dbo_Employees_HttpClient(HttpClient httpClient) : base(httpClient)
    {            
    }
	public async Task<IEnumerable<Northwind_dbo_Employees>?> GetAll()
	{
		var result = await _httpClient.GetAsync(_httpClient.BaseAddress!.ToString() + "Northwind_dbo_Employees/GetAll");
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Employees>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Employees>?> GetByLastName(String lastName)
	{
		var uri = GetUriForParamsLastName("Northwind_dbo_Employees/GetByLastName", lastName);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Employees>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Employees>?> GetByEmployeeID(Int32 employeeID)
	{
		var uri = GetUriForParamsEmployeeID("Northwind_dbo_Employees/GetByEmployeeID", employeeID);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Employees>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Employees>?> GetByPostalCode(String? postalCode)
	{
		var uri = GetUriForParamsPostalCode("Northwind_dbo_Employees/GetByPostalCode", postalCode);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Employees>?>(content, _jsonSerializationSettings);
	}
	public async Task<Northwind_dbo_Employees?> Create(Northwind_dbo_Employees input)
	{
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PostAsync(_httpClient.BaseAddress!.ToString() + "Northwind_dbo_Employees/Create", new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<Northwind_dbo_Employees?>(content, _jsonSerializationSettings);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, Northwind_dbo_Employees updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByEmployeeID(Convert.ToInt32(inputSplits[0]), updateModel);
	}
	public async Task UpdateByLastName(String lastName, Northwind_dbo_Employees input)
	{
		var uri = GetUriForParamsLastName("Northwind_dbo_Employees/UpdateByLastName", lastName);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByEmployeeID(Int32 employeeID, Northwind_dbo_Employees input)
	{
		var uri = GetUriForParamsEmployeeID("Northwind_dbo_Employees/UpdateByEmployeeID", employeeID);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByPostalCode(String? postalCode, Northwind_dbo_Employees input)
	{
		var uri = GetUriForParamsPostalCode("Northwind_dbo_Employees/UpdateByPostalCode", postalCode);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByEmployeeID(Convert.ToInt32(inputSplits[0]));
	}
	public async Task DeleteByLastName(String lastName)
	{
		var uri = GetUriForParamsLastName("Northwind_dbo_Employees/DeleteByLastName", lastName);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByEmployeeID(Int32 employeeID)
	{
		var uri = GetUriForParamsEmployeeID("Northwind_dbo_Employees/DeleteByEmployeeID", employeeID);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByPostalCode(String? postalCode)
	{
		var uri = GetUriForParamsPostalCode("Northwind_dbo_Employees/DeleteByPostalCode", postalCode);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	private String GetUriForParamsLastName(String path, String lastName)
	{
		var query = new Dictionary<String,String>();
		query["lastName"] = lastName;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsEmployeeID(String path, Int32 employeeID)
	{
		var query = new Dictionary<String,String>();
		query["employeeID"] = employeeID.ToString();
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsPostalCode(String path, String? postalCode)
	{
		var query = new Dictionary<String,String>();
		query["postalCode"] = postalCode ?? String.Empty;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
}
