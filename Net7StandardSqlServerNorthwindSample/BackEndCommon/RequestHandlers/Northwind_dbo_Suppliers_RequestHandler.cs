/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200434 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Standard Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Northwind_BackEndDatabaseClient.Repositories;
using Northwind_BackEndSqlEntities.Entities;
namespace Northwind_BackEndCommon.RequestHandlers;
public class Northwind_dbo_Suppliers_RequestHandler : INorthwind_dbo_Suppliers_RequestHandler
{
    private readonly ILogger<Northwind_dbo_Suppliers_RequestHandler> _logger;
    private readonly INorthwind_dbo_Suppliers_Repository _repository;
    public Northwind_dbo_Suppliers_RequestHandler(
    ILogger<Northwind_dbo_Suppliers_RequestHandler> logger
    ,INorthwind_dbo_Suppliers_Repository repository)
    {
        _logger = logger;
        _repository = repository;
    }
	//Main Handlers
	public async Task<IEnumerable<Northwind_dbo_Suppliers>?> HandleGetAll()
	{
		var retData = await _repository.GetAll();
		return retData;
	}
	public async Task<IEnumerable<Northwind_dbo_Suppliers>?> HandleGetByCompanyName(String companyName)
	{
		var retData = await _repository.GetByCompanyName(companyName);
		return retData;
	}
	public async Task<IEnumerable<Northwind_dbo_Suppliers>?> HandleGetBySupplierID(Int32 supplierID)
	{
		var retData = await _repository.GetBySupplierID(supplierID);
		return retData;
	}
	public async Task<IEnumerable<Northwind_dbo_Suppliers>?> HandleGetByPostalCode(String? postalCode)
	{
		var retData = await _repository.GetByPostalCode(postalCode);
		return retData;
	}
	public async Task<Northwind_dbo_Suppliers?> HandleCreate(Northwind_dbo_Suppliers input)
	{
		var results = await _repository.Create(input);
		return results;
	}
	public async Task HandleUpdateByCompanyName(String companyName, Northwind_dbo_Suppliers entity)
	{
		await _repository.UpdateByCompanyName(companyName, entity);
	}
	public async Task HandleUpdateBySupplierID(Int32 supplierID, Northwind_dbo_Suppliers entity)
	{
		await _repository.UpdateBySupplierID(supplierID, entity);
	}
	public async Task HandleUpdateByPostalCode(String? postalCode, Northwind_dbo_Suppliers entity)
	{
		await _repository.UpdateByPostalCode(postalCode, entity);
	}
	public async Task HandleDeleteByCompanyName(String companyName)
	{
		await _repository.DeleteByCompanyName(companyName);
	}
	public async Task HandleDeleteBySupplierID(Int32 supplierID)
	{
		await _repository.DeleteBySupplierID(supplierID);
	}
	public async Task HandleDeleteByPostalCode(String? postalCode)
	{
		await _repository.DeleteByPostalCode(postalCode);
	}
}
