/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202848 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Standard Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using XE_HR_BackEndDatabaseClient.Repositories;
using XE_HR_BackEndSqlEntities.Entities;
namespace XE_HR_BackEndCommon.RequestHandlers;
public class XE_HR_EMPLOYEES_RequestHandler : IXE_HR_EMPLOYEES_RequestHandler
{
    private readonly ILogger<XE_HR_EMPLOYEES_RequestHandler> _logger;
    private readonly IXE_HR_EMPLOYEES_Repository _repository;
    public XE_HR_EMPLOYEES_RequestHandler(
    ILogger<XE_HR_EMPLOYEES_RequestHandler> logger
    ,IXE_HR_EMPLOYEES_Repository repository)
    {
        _logger = logger;
        _repository = repository;
    }
	//Main Handlers
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> HandleGetAll()
	{
		var retData = await _repository.GetAll();
		return retData;
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> HandleGetByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		var retData = await _repository.GetByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
		return retData;
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> HandleGetByDEPARTMENT_ID(Int32? dEPARTMENT_ID)
	{
		var retData = await _repository.GetByDEPARTMENT_ID(dEPARTMENT_ID);
		return retData;
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> HandleGetByEMAIL(String eMAIL)
	{
		var retData = await _repository.GetByEMAIL(eMAIL);
		return retData;
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> HandleGetByEMPLOYEE_ID(Int32 eMPLOYEE_ID)
	{
		var retData = await _repository.GetByEMPLOYEE_ID(eMPLOYEE_ID);
		return retData;
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> HandleGetByJOB_ID(String jOB_ID)
	{
		var retData = await _repository.GetByJOB_ID(jOB_ID);
		return retData;
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> HandleGetByMANAGER_ID(Int32? mANAGER_ID)
	{
		var retData = await _repository.GetByMANAGER_ID(mANAGER_ID);
		return retData;
	}
	public async Task<XE_HR_EMPLOYEES?> HandleCreate(XE_HR_EMPLOYEES input)
	{
		var results = await _repository.Create(input);
		return results;
	}
	public async Task HandleUpdateByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME, XE_HR_EMPLOYEES entity)
	{
		await _repository.UpdateByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME, entity);
	}
	public async Task HandleUpdateByDEPARTMENT_ID(Int32? dEPARTMENT_ID, XE_HR_EMPLOYEES entity)
	{
		await _repository.UpdateByDEPARTMENT_ID(dEPARTMENT_ID, entity);
	}
	public async Task HandleUpdateByEMAIL(String eMAIL, XE_HR_EMPLOYEES entity)
	{
		await _repository.UpdateByEMAIL(eMAIL, entity);
	}
	public async Task HandleUpdateByEMPLOYEE_ID(Int32 eMPLOYEE_ID, XE_HR_EMPLOYEES entity)
	{
		await _repository.UpdateByEMPLOYEE_ID(eMPLOYEE_ID, entity);
	}
	public async Task HandleUpdateByJOB_ID(String jOB_ID, XE_HR_EMPLOYEES entity)
	{
		await _repository.UpdateByJOB_ID(jOB_ID, entity);
	}
	public async Task HandleUpdateByMANAGER_ID(Int32? mANAGER_ID, XE_HR_EMPLOYEES entity)
	{
		await _repository.UpdateByMANAGER_ID(mANAGER_ID, entity);
	}
	public async Task HandleDeleteByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		await _repository.DeleteByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
	}
	public async Task HandleDeleteByDEPARTMENT_ID(Int32? dEPARTMENT_ID)
	{
		await _repository.DeleteByDEPARTMENT_ID(dEPARTMENT_ID);
	}
	public async Task HandleDeleteByEMAIL(String eMAIL)
	{
		await _repository.DeleteByEMAIL(eMAIL);
	}
	public async Task HandleDeleteByEMPLOYEE_ID(Int32 eMPLOYEE_ID)
	{
		await _repository.DeleteByEMPLOYEE_ID(eMPLOYEE_ID);
	}
	public async Task HandleDeleteByJOB_ID(String jOB_ID)
	{
		await _repository.DeleteByJOB_ID(jOB_ID);
	}
	public async Task HandleDeleteByMANAGER_ID(Int32? mANAGER_ID)
	{
		await _repository.DeleteByMANAGER_ID(mANAGER_ID);
	}
}
