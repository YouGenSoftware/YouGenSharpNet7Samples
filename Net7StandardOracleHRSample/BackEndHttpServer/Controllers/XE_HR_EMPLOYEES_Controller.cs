/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202848 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Standard Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using XE_HR_BackEndSqlEntities.Entities;
using XE_HR_BackEndCommon.RequestHandlers;
namespace XE_HR_BackEndDatabaseClient.Controllers;
[SwaggerTag(@"Controller Description: employees table. Contains 107 rows. References with departments, jobs, job_history tables. Contains a self reference.")]
[RequireHttps]
public class XE_HR_EMPLOYEES_Controller : ControllerBase
{
	private readonly IXE_HR_EMPLOYEES_RequestHandler _requestHandler;
	public XE_HR_EMPLOYEES_Controller(IXE_HR_EMPLOYEES_RequestHandler requestHandler)
	{
		_requestHandler = requestHandler;
	}
	/// <summary>
	/// Get All records of EMPLOYEES table
	/// </summary>
	[HttpGet, Route("XE_HR_EMPLOYEES/GetAll")]
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> GetAll()
	{
		return await _requestHandler.HandleGetAll();
	}
	/// <summary>
	/// Get record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_EMPLOYEES/GetByFIRST_NAMEAndLAST_NAME")]
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> GetByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		return await _requestHandler.HandleGetByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
	}
	/// <summary>
	/// Get record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_EMPLOYEES/GetByDEPARTMENT_ID")]
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> GetByDEPARTMENT_ID(Int32? dEPARTMENT_ID)
	{
		return await _requestHandler.HandleGetByDEPARTMENT_ID(dEPARTMENT_ID);
	}
	/// <summary>
	/// Get record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_EMPLOYEES/GetByEMAIL")]
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> GetByEMAIL(String eMAIL)
	{
		return await _requestHandler.HandleGetByEMAIL(eMAIL);
	}
	/// <summary>
	/// Get record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_EMPLOYEES/GetByEMPLOYEE_ID")]
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> GetByEMPLOYEE_ID(Int32 eMPLOYEE_ID)
	{
		return await _requestHandler.HandleGetByEMPLOYEE_ID(eMPLOYEE_ID);
	}
	/// <summary>
	/// Get record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_EMPLOYEES/GetByJOB_ID")]
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> GetByJOB_ID(String jOB_ID)
	{
		return await _requestHandler.HandleGetByJOB_ID(jOB_ID);
	}
	/// <summary>
	/// Get record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("XE_HR_EMPLOYEES/GetByMANAGER_ID")]
	public async Task<IEnumerable<XE_HR_EMPLOYEES>?> GetByMANAGER_ID(Int32? mANAGER_ID)
	{
		return await _requestHandler.HandleGetByMANAGER_ID(mANAGER_ID);
	}
	/// <summary>
	/// Create and return record of EMPLOYEES table
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPost, Route("XE_HR_EMPLOYEES/Create")]
	public async Task<XE_HR_EMPLOYEES?> Create([FromBody]XE_HR_EMPLOYEES input)
	{
		return await _requestHandler.HandleCreate(input);
	}
	/// <summary>
	/// Update record of EMPLOYEES table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_EMPLOYEES/UpdateByFIRST_NAMEAndLAST_NAME")]
	public async Task UpdateByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME, [FromBody]XE_HR_EMPLOYEES input)
	{
		await _requestHandler.HandleUpdateByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME, input);
	}
	/// <summary>
	/// Update record of EMPLOYEES table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_EMPLOYEES/UpdateByDEPARTMENT_ID")]
	public async Task UpdateByDEPARTMENT_ID(Int32? dEPARTMENT_ID, [FromBody]XE_HR_EMPLOYEES input)
	{
		await _requestHandler.HandleUpdateByDEPARTMENT_ID(dEPARTMENT_ID, input);
	}
	/// <summary>
	/// Update record of EMPLOYEES table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_EMPLOYEES/UpdateByEMAIL")]
	public async Task UpdateByEMAIL(String eMAIL, [FromBody]XE_HR_EMPLOYEES input)
	{
		await _requestHandler.HandleUpdateByEMAIL(eMAIL, input);
	}
	/// <summary>
	/// Update record of EMPLOYEES table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_EMPLOYEES/UpdateByEMPLOYEE_ID")]
	public async Task UpdateByEMPLOYEE_ID(Int32 eMPLOYEE_ID, [FromBody]XE_HR_EMPLOYEES input)
	{
		await _requestHandler.HandleUpdateByEMPLOYEE_ID(eMPLOYEE_ID, input);
	}
	/// <summary>
	/// Update record of EMPLOYEES table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_EMPLOYEES/UpdateByJOB_ID")]
	public async Task UpdateByJOB_ID(String jOB_ID, [FromBody]XE_HR_EMPLOYEES input)
	{
		await _requestHandler.HandleUpdateByJOB_ID(jOB_ID, input);
	}
	/// <summary>
	/// Update record of EMPLOYEES table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("XE_HR_EMPLOYEES/UpdateByMANAGER_ID")]
	public async Task UpdateByMANAGER_ID(Int32? mANAGER_ID, [FromBody]XE_HR_EMPLOYEES input)
	{
		await _requestHandler.HandleUpdateByMANAGER_ID(mANAGER_ID, input);
	}
	/// <summary>
	/// Delete record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_EMPLOYEES/DeleteByFIRST_NAMEAndLAST_NAME")]
	public async Task DeleteByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		await _requestHandler.HandleDeleteByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
	}
	/// <summary>
	/// Delete record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_EMPLOYEES/DeleteByDEPARTMENT_ID")]
	public async Task DeleteByDEPARTMENT_ID(Int32? dEPARTMENT_ID)
	{
		await _requestHandler.HandleDeleteByDEPARTMENT_ID(dEPARTMENT_ID);
	}
	/// <summary>
	/// Delete record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_EMPLOYEES/DeleteByEMAIL")]
	public async Task DeleteByEMAIL(String eMAIL)
	{
		await _requestHandler.HandleDeleteByEMAIL(eMAIL);
	}
	/// <summary>
	/// Delete record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_EMPLOYEES/DeleteByEMPLOYEE_ID")]
	public async Task DeleteByEMPLOYEE_ID(Int32 eMPLOYEE_ID)
	{
		await _requestHandler.HandleDeleteByEMPLOYEE_ID(eMPLOYEE_ID);
	}
	/// <summary>
	/// Delete record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_EMPLOYEES/DeleteByJOB_ID")]
	public async Task DeleteByJOB_ID(String jOB_ID)
	{
		await _requestHandler.HandleDeleteByJOB_ID(jOB_ID);
	}
	/// <summary>
	/// Delete record of EMPLOYEES table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("XE_HR_EMPLOYEES/DeleteByMANAGER_ID")]
	public async Task DeleteByMANAGER_ID(Int32? mANAGER_ID)
	{
		await _requestHandler.HandleDeleteByMANAGER_ID(mANAGER_ID);
	}
}
