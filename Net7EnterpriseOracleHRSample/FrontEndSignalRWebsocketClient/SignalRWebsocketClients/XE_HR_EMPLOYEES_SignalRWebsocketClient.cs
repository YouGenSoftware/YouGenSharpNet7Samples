/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202958 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.SignalR.Client;
using XE_HR_Common.IndirectReferenceTransformerModels;
namespace XE_HR_FrontEndSignalRWebsocketClient.SignalRWebsocketClients;
public class XE_HR_EMPLOYEES_SignalRWebsocketClient : SignalRWebsocketClientBase, IXE_HR_EMPLOYEES_SignalRWebsocketClient, IAsyncDisposable
{
	public XE_HR_EMPLOYEES_SignalRWebsocketClient(String hubUrl) : base(hubUrl)
    {
    }
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetByBestMatchedQueryPattern(XE_HR_EMPLOYEES_IR input)
	{
		if (input == null) return null;
		IEnumerable<XE_HR_EMPLOYEES_IR>? retData;
		if (input.FIRST_NAME_HasBeenChanged && input.LAST_NAME_HasBeenChanged) retData = await GetByFIRST_NAMEAndLAST_NAME(input.FIRST_NAME, input.LAST_NAME ?? String.Empty);
		else if (input.DEPARTMENT_ID_IR_HasBeenChanged) retData = await GetByDEPARTMENT_ID(input.DEPARTMENT_ID_IR);
		else if (input.EMAIL_HasBeenChanged) retData = await GetByEMAIL(input.EMAIL ?? String.Empty);
		else if (input.EMPLOYEE_ID_IR_HasBeenChanged) retData = await GetByEMPLOYEE_ID(input.EMPLOYEE_ID_IR ?? default);
		else if (input.JOB_ID_HasBeenChanged) retData = await GetByJOB_ID(input.JOB_ID ?? String.Empty);
		else if (input.MANAGER_ID_IR_HasBeenChanged) retData = await GetByMANAGER_ID(input.MANAGER_ID_IR);
		else retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(XE_HR_EMPLOYEES_IR record, XE_HR_EMPLOYEES_IR filter)
	{
		 // unencrypted properties only
		return			(!filter.FIRST_NAME_HasBeenChanged || record.FIRST_NAME == filter.FIRST_NAME) &&
			(!filter.LAST_NAME_HasBeenChanged || record.LAST_NAME == filter.LAST_NAME) &&
			(!filter.EMAIL_HasBeenChanged || record.EMAIL == filter.EMAIL) &&
			(!filter.PHONE_NUMBER_HasBeenChanged || record.PHONE_NUMBER == filter.PHONE_NUMBER) &&
			(!filter.HIRE_DATE_HasBeenChanged || record.HIRE_DATE == filter.HIRE_DATE);
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetAll()
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMPLOYEES_IR>?>("GetAll");
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMPLOYEES_IR>?>("GetByFIRST_NAMEAndLAST_NAME", fIRST_NAME, lAST_NAME);
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMPLOYEES_IR>?>("GetByDEPARTMENT_ID", dEPARTMENT_ID_IR);
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetByEMAIL(String eMAIL)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMPLOYEES_IR>?>("GetByEMAIL", eMAIL);
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMPLOYEES_IR>?>("GetByEMPLOYEE_ID", eMPLOYEE_ID_IR);
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetByJOB_ID(String jOB_ID)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMPLOYEES_IR>?>("GetByJOB_ID", jOB_ID);
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> GetByMANAGER_ID(String? mANAGER_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMPLOYEES_IR>?>("GetByMANAGER_ID", mANAGER_ID_IR);
	}
	public async Task<XE_HR_EMPLOYEES_IR?> Create(XE_HR_EMPLOYEES_IR input)
	{
		return await _hubConnection.InvokeAsync<XE_HR_EMPLOYEES_IR?>("Create", input);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, XE_HR_EMPLOYEES_IR updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByEMPLOYEE_ID(inputSplits[0], updateModel);
	}
	public async Task UpdateByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME, XE_HR_EMPLOYEES_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByFIRST_NAMEAndLAST_NAME", fIRST_NAME, lAST_NAME, input);
	}
	public async Task UpdateByDEPARTMENT_ID(String? dEPARTMENT_ID_IR, XE_HR_EMPLOYEES_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByDEPARTMENT_ID", dEPARTMENT_ID_IR, input);
	}
	public async Task UpdateByEMAIL(String eMAIL, XE_HR_EMPLOYEES_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByEMAIL", eMAIL, input);
	}
	public async Task UpdateByEMPLOYEE_ID(String? eMPLOYEE_ID_IR, XE_HR_EMPLOYEES_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByEMPLOYEE_ID", eMPLOYEE_ID_IR, input);
	}
	public async Task UpdateByJOB_ID(String jOB_ID, XE_HR_EMPLOYEES_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByJOB_ID", jOB_ID, input);
	}
	public async Task UpdateByMANAGER_ID(String? mANAGER_ID_IR, XE_HR_EMPLOYEES_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByMANAGER_ID", mANAGER_ID_IR, input);
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByEMPLOYEE_ID(inputSplits[0]);
	}
	public async Task DeleteByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		await _hubConnection.InvokeAsync("DeleteByFIRST_NAMEAndLAST_NAME", fIRST_NAME, lAST_NAME);
	}
	public async Task DeleteByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByDEPARTMENT_ID", dEPARTMENT_ID_IR);
	}
	public async Task DeleteByEMAIL(String eMAIL)
	{
		await _hubConnection.InvokeAsync("DeleteByEMAIL", eMAIL);
	}
	public async Task DeleteByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByEMPLOYEE_ID", eMPLOYEE_ID_IR);
	}
	public async Task DeleteByJOB_ID(String jOB_ID)
	{
		await _hubConnection.InvokeAsync("DeleteByJOB_ID", jOB_ID);
	}
	public async Task DeleteByMANAGER_ID(String? mANAGER_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByMANAGER_ID", mANAGER_ID_IR);
	}
    public async Task InitializeAsync()
    {
        await base.EstablishConnection();
    }
    public Boolean GetStatus()
    {
        return base.Initiated;
    }
    public async ValueTask DisposeAsync()
    {
        await base.TerminateConnection();
        GC.SuppressFinalize(this);
    }
}
