/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202958 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.SignalR.Client;
using XE_HR_Common.IndirectReferenceTransformerModels;
namespace XE_HR_FrontEndSignalRWebsocketClient.SignalRWebsocketClients;
public class XE_HR_EMP_DETAILS_VIEW_SignalRWebsocketClient : SignalRWebsocketClientBase, IXE_HR_EMP_DETAILS_VIEW_SignalRWebsocketClient, IAsyncDisposable
{
	public XE_HR_EMP_DETAILS_VIEW_SignalRWebsocketClient(String hubUrl) : base(hubUrl)
    {
    }
	public async Task<IEnumerable<XE_HR_EMP_DETAILS_VIEW_IR>?> GetByBestMatchedQueryPattern(XE_HR_EMP_DETAILS_VIEW_IR input)
	{
		if (input == null) return null;
		IEnumerable<XE_HR_EMP_DETAILS_VIEW_IR>? retData;
		retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(XE_HR_EMP_DETAILS_VIEW_IR record, XE_HR_EMP_DETAILS_VIEW_IR filter)
	{
		return 			(!filter.EMPLOYEE_ID_IR_HasBeenChanged || record.EMPLOYEE_ID_IR == filter.EMPLOYEE_ID_IR) &&
			(!filter.JOB_ID_HasBeenChanged || record.JOB_ID == filter.JOB_ID) &&
			(!filter.MANAGER_ID_IR_HasBeenChanged || record.MANAGER_ID_IR == filter.MANAGER_ID_IR) &&
			(!filter.DEPARTMENT_ID_IR_HasBeenChanged || record.DEPARTMENT_ID_IR == filter.DEPARTMENT_ID_IR) &&
			(!filter.LOCATION_ID_IR_HasBeenChanged || record.LOCATION_ID_IR == filter.LOCATION_ID_IR) &&
			(!filter.COUNTRY_ID_HasBeenChanged || record.COUNTRY_ID == filter.COUNTRY_ID) &&
			(!filter.FIRST_NAME_HasBeenChanged || record.FIRST_NAME == filter.FIRST_NAME) &&
			(!filter.LAST_NAME_HasBeenChanged || record.LAST_NAME == filter.LAST_NAME) &&
			(!filter.SALARY_HasBeenChanged || record.SALARY == filter.SALARY) &&
			(!filter.COMMISSION_PCT_HasBeenChanged || record.COMMISSION_PCT == filter.COMMISSION_PCT) &&
			(!filter.DEPARTMENT_NAME_HasBeenChanged || record.DEPARTMENT_NAME == filter.DEPARTMENT_NAME) &&
			(!filter.JOB_TITLE_HasBeenChanged || record.JOB_TITLE == filter.JOB_TITLE) &&
			(!filter.CITY_HasBeenChanged || record.CITY == filter.CITY) &&
			(!filter.STATE_PROVINCE_HasBeenChanged || record.STATE_PROVINCE == filter.STATE_PROVINCE) &&
			(!filter.COUNTRY_NAME_HasBeenChanged || record.COUNTRY_NAME == filter.COUNTRY_NAME) &&
			(!filter.REGION_NAME_HasBeenChanged || record.REGION_NAME == filter.REGION_NAME);
	}
	public async Task<IEnumerable<XE_HR_EMP_DETAILS_VIEW_IR>?> GetAll()
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_EMP_DETAILS_VIEW_IR>?>("GetAll");
	}
    public async Task InitializeAsync()
    {
        await base.EstablishConnection();
    }
    public Boolean GetStatus()
    {
        return base.Initiated;
    }
    public async ValueTask DisposeAsync()
    {
        await base.TerminateConnection();
        GC.SuppressFinalize(this);
    }
}
