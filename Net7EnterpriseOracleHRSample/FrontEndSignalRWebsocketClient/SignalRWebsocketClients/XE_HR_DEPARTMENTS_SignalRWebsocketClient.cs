/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202958 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.SignalR.Client;
using XE_HR_Common.IndirectReferenceTransformerModels;
namespace XE_HR_FrontEndSignalRWebsocketClient.SignalRWebsocketClients;
public class XE_HR_DEPARTMENTS_SignalRWebsocketClient : SignalRWebsocketClientBase, IXE_HR_DEPARTMENTS_SignalRWebsocketClient, IAsyncDisposable
{
	public XE_HR_DEPARTMENTS_SignalRWebsocketClient(String hubUrl) : base(hubUrl)
    {
    }
	public async Task<IEnumerable<XE_HR_DEPARTMENTS_IR>?> GetByBestMatchedQueryPattern(XE_HR_DEPARTMENTS_IR input)
	{
		if (input == null) return null;
		IEnumerable<XE_HR_DEPARTMENTS_IR>? retData;
		if (input.DEPARTMENT_ID_IR_HasBeenChanged) retData = await GetByDEPARTMENT_ID(input.DEPARTMENT_ID_IR ?? default);
		else if (input.LOCATION_ID_IR_HasBeenChanged) retData = await GetByLOCATION_ID(input.LOCATION_ID_IR);
		else retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(XE_HR_DEPARTMENTS_IR record, XE_HR_DEPARTMENTS_IR filter)
	{
		 // unencrypted properties only
		return			(!filter.DEPARTMENT_NAME_HasBeenChanged || record.DEPARTMENT_NAME == filter.DEPARTMENT_NAME);
	}
	public async Task<IEnumerable<XE_HR_DEPARTMENTS_IR>?> GetAll()
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_DEPARTMENTS_IR>?>("GetAll");
	}
	public async Task<IEnumerable<XE_HR_DEPARTMENTS_IR>?> GetByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_DEPARTMENTS_IR>?>("GetByDEPARTMENT_ID", dEPARTMENT_ID_IR);
	}
	public async Task<IEnumerable<XE_HR_DEPARTMENTS_IR>?> GetByLOCATION_ID(String? lOCATION_ID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<XE_HR_DEPARTMENTS_IR>?>("GetByLOCATION_ID", lOCATION_ID_IR);
	}
	public async Task<XE_HR_DEPARTMENTS_IR?> Create(XE_HR_DEPARTMENTS_IR input)
	{
		return await _hubConnection.InvokeAsync<XE_HR_DEPARTMENTS_IR?>("Create", input);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, XE_HR_DEPARTMENTS_IR updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByDEPARTMENT_ID(inputSplits[0], updateModel);
	}
	public async Task UpdateByDEPARTMENT_ID(String? dEPARTMENT_ID_IR, XE_HR_DEPARTMENTS_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByDEPARTMENT_ID", dEPARTMENT_ID_IR, input);
	}
	public async Task UpdateByLOCATION_ID(String? lOCATION_ID_IR, XE_HR_DEPARTMENTS_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByLOCATION_ID", lOCATION_ID_IR, input);
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByDEPARTMENT_ID(inputSplits[0]);
	}
	public async Task DeleteByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByDEPARTMENT_ID", dEPARTMENT_ID_IR);
	}
	public async Task DeleteByLOCATION_ID(String? lOCATION_ID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByLOCATION_ID", lOCATION_ID_IR);
	}
    public async Task InitializeAsync()
    {
        await base.EstablishConnection();
    }
    public Boolean GetStatus()
    {
        return base.Initiated;
    }
    public async ValueTask DisposeAsync()
    {
        await base.TerminateConnection();
        GC.SuppressFinalize(this);
    }
}
