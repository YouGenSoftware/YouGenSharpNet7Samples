/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202958 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using XE_HR_Common.IndirectReferenceTransformerModels;
using XE_HR_BackEndDatabaseClient.Repositories;
using XE_HR_Common.Validators;
using XE_HR_BackEndCommon.IndirectReferenceTransformers;
using XE_HR_BackEndCommon.Services;
namespace XE_HR_BackEndCommon.RequestHandlers;
public class XE_HR_EMPLOYEES_RequestHandler : IXE_HR_EMPLOYEES_RequestHandler
{
    private readonly ILogger<XE_HR_EMPLOYEES_RequestHandler> _logger;
    private readonly IEncryptionDecryptionService _encryptionDecryptionService; 
    private readonly IIRTransformers _indirectReferenceTransformers;
    private readonly IXE_HR_EMPLOYEES_Repository _repository;
    private readonly XE_HR_EMPLOYEES_IR_FluentValidator_Create _createValidator;
    private readonly XE_HR_EMPLOYEES_IR_FluentValidator_Read _readValidator;
    private readonly XE_HR_EMPLOYEES_IR_FluentValidator_Update _updateValidator;
    private readonly XE_HR_EMPLOYEES_IR_FluentValidator_Delete _deleteValidator;
    public XE_HR_EMPLOYEES_RequestHandler(
        ILogger<XE_HR_EMPLOYEES_RequestHandler> logger
        ,IEncryptionDecryptionService encryptionDecryptionService
        ,IIRTransformers indirectReferenceTransformers
        ,IXE_HR_EMPLOYEES_Repository repository 
        ,XE_HR_EMPLOYEES_IR_FluentValidator_Create createValidator
        ,XE_HR_EMPLOYEES_IR_FluentValidator_Read readValidator
        ,XE_HR_EMPLOYEES_IR_FluentValidator_Update updateValidator
        ,XE_HR_EMPLOYEES_IR_FluentValidator_Delete deleteValidator
    )
    {
        _logger = logger;
        _encryptionDecryptionService = encryptionDecryptionService;
        _indirectReferenceTransformers = indirectReferenceTransformers;
        _repository = repository;
        _createValidator = createValidator;
        _readValidator = readValidator;
        _updateValidator = updateValidator;
        _deleteValidator = deleteValidator;
    }
	//Main Handlers
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> HandleGetAll()
	{
		await PreHandleGetAll();
		var retData = await _repository.GetAll();
		await PostHandleGetAll();
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMPLOYEES_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> HandleGetByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		await PreHandleGetByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
		var retData = await _repository.GetByFIRST_NAMEAndLAST_NAME((fIRST_NAME), (lAST_NAME));
		await PostHandleGetByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMPLOYEES_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> HandleGetByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		await PreHandleGetByDEPARTMENT_ID(dEPARTMENT_ID_IR);
		var retData = await _repository.GetByDEPARTMENT_ID(_encryptionDecryptionService.DecInt32Nullable(dEPARTMENT_ID_IR));
		await PostHandleGetByDEPARTMENT_ID(dEPARTMENT_ID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMPLOYEES_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> HandleGetByEMAIL(String eMAIL)
	{
		await PreHandleGetByEMAIL(eMAIL);
		var retData = await _repository.GetByEMAIL((eMAIL));
		await PostHandleGetByEMAIL(eMAIL);
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMPLOYEES_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> HandleGetByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		await PreHandleGetByEMPLOYEE_ID(eMPLOYEE_ID_IR);
		var retData = await _repository.GetByEMPLOYEE_ID(_encryptionDecryptionService.DecInt32(eMPLOYEE_ID_IR));
		await PostHandleGetByEMPLOYEE_ID(eMPLOYEE_ID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMPLOYEES_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> HandleGetByJOB_ID(String jOB_ID)
	{
		await PreHandleGetByJOB_ID(jOB_ID);
		var retData = await _repository.GetByJOB_ID((jOB_ID));
		await PostHandleGetByJOB_ID(jOB_ID);
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMPLOYEES_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<XE_HR_EMPLOYEES_IR>?> HandleGetByMANAGER_ID(String? mANAGER_ID_IR)
	{
		await PreHandleGetByMANAGER_ID(mANAGER_ID_IR);
		var retData = await _repository.GetByMANAGER_ID(_encryptionDecryptionService.DecInt32Nullable(mANAGER_ID_IR));
		await PostHandleGetByMANAGER_ID(mANAGER_ID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMPLOYEES_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<XE_HR_EMPLOYEES_IR?> HandleCreate<T>(T irModel) where T : XE_HR_EMPLOYEES_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleCreate(irModel);
		entity = await _repository.Create(entity!);
		if (entity != null) 
		{
			await PostHandleCreate(irModel);
			return _indirectReferenceTransformers.ToIndirectModel(entity!);
		}
		else
			return null;
	}
	public async Task HandleUpdateByFIRST_NAMEAndLAST_NAME<T>(String? fIRST_NAME, String lAST_NAME, T irModel) where T : XE_HR_EMPLOYEES_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME, irModel);
		await _repository.UpdateByFIRST_NAMEAndLAST_NAME((fIRST_NAME), (lAST_NAME), entity!);
		await PostHandleUpdateByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME, irModel);
	}
	public async Task HandleUpdateByDEPARTMENT_ID<T>(String? dEPARTMENT_ID_IR, T irModel) where T : XE_HR_EMPLOYEES_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByDEPARTMENT_ID(dEPARTMENT_ID_IR, irModel);
		await _repository.UpdateByDEPARTMENT_ID(_encryptionDecryptionService.DecInt32Nullable(dEPARTMENT_ID_IR), entity!);
		await PostHandleUpdateByDEPARTMENT_ID(dEPARTMENT_ID_IR, irModel);
	}
	public async Task HandleUpdateByEMAIL<T>(String eMAIL, T irModel) where T : XE_HR_EMPLOYEES_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByEMAIL(eMAIL, irModel);
		await _repository.UpdateByEMAIL((eMAIL), entity!);
		await PostHandleUpdateByEMAIL(eMAIL, irModel);
	}
	public async Task HandleUpdateByEMPLOYEE_ID<T>(String? eMPLOYEE_ID_IR, T irModel) where T : XE_HR_EMPLOYEES_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByEMPLOYEE_ID(eMPLOYEE_ID_IR, irModel);
		await _repository.UpdateByEMPLOYEE_ID(_encryptionDecryptionService.DecInt32(eMPLOYEE_ID_IR), entity!);
		await PostHandleUpdateByEMPLOYEE_ID(eMPLOYEE_ID_IR, irModel);
	}
	public async Task HandleUpdateByJOB_ID<T>(String jOB_ID, T irModel) where T : XE_HR_EMPLOYEES_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByJOB_ID(jOB_ID, irModel);
		await _repository.UpdateByJOB_ID((jOB_ID), entity!);
		await PostHandleUpdateByJOB_ID(jOB_ID, irModel);
	}
	public async Task HandleUpdateByMANAGER_ID<T>(String? mANAGER_ID_IR, T irModel) where T : XE_HR_EMPLOYEES_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByMANAGER_ID(mANAGER_ID_IR, irModel);
		await _repository.UpdateByMANAGER_ID(_encryptionDecryptionService.DecInt32Nullable(mANAGER_ID_IR), entity!);
		await PostHandleUpdateByMANAGER_ID(mANAGER_ID_IR, irModel);
	}
	public async Task HandleDeleteByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		await PreHandleDeleteByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
		await _repository.DeleteByFIRST_NAMEAndLAST_NAME((fIRST_NAME), (lAST_NAME));
		await PostHandleDeleteByFIRST_NAMEAndLAST_NAME(fIRST_NAME, lAST_NAME);
	}
	public async Task HandleDeleteByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		await PreHandleDeleteByDEPARTMENT_ID(dEPARTMENT_ID_IR);
		await _repository.DeleteByDEPARTMENT_ID(_encryptionDecryptionService.DecInt32Nullable(dEPARTMENT_ID_IR));
		await PostHandleDeleteByDEPARTMENT_ID(dEPARTMENT_ID_IR);
	}
	public async Task HandleDeleteByEMAIL(String eMAIL)
	{
		await PreHandleDeleteByEMAIL(eMAIL);
		await _repository.DeleteByEMAIL((eMAIL));
		await PostHandleDeleteByEMAIL(eMAIL);
	}
	public async Task HandleDeleteByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		await PreHandleDeleteByEMPLOYEE_ID(eMPLOYEE_ID_IR);
		await _repository.DeleteByEMPLOYEE_ID(_encryptionDecryptionService.DecInt32(eMPLOYEE_ID_IR));
		await PostHandleDeleteByEMPLOYEE_ID(eMPLOYEE_ID_IR);
	}
	public async Task HandleDeleteByJOB_ID(String jOB_ID)
	{
		await PreHandleDeleteByJOB_ID(jOB_ID);
		await _repository.DeleteByJOB_ID((jOB_ID));
		await PostHandleDeleteByJOB_ID(jOB_ID);
	}
	public async Task HandleDeleteByMANAGER_ID(String? mANAGER_ID_IR)
	{
		await PreHandleDeleteByMANAGER_ID(mANAGER_ID_IR);
		await _repository.DeleteByMANAGER_ID(_encryptionDecryptionService.DecInt32Nullable(mANAGER_ID_IR));
		await PostHandleDeleteByMANAGER_ID(mANAGER_ID_IR);
	}
	//PreCRUD Handlers
	private async Task PreHandleGetAll()
	{
		// Add preCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PreHandleGetByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.FIRST_NAME = fIRST_NAME;
		selectorProperties.LAST_NAME = lAST_NAME;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.DEPARTMENT_ID_IR = dEPARTMENT_ID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByEMAIL(String eMAIL)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.EMAIL = eMAIL;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.EMPLOYEE_ID_IR = eMPLOYEE_ID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByJOB_ID(String jOB_ID)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.JOB_ID = jOB_ID;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByMANAGER_ID(String? mANAGER_ID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.MANAGER_ID_IR = mANAGER_ID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleCreate(XE_HR_EMPLOYEES_IR irModel)
	{
		// Add preCRUD calls/events
		await _createValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.FIRST_NAME = fIRST_NAME;
		selectorProperties.LAST_NAME = lAST_NAME;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByDEPARTMENT_ID(String? dEPARTMENT_ID_IR, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.DEPARTMENT_ID_IR = dEPARTMENT_ID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByEMAIL(String eMAIL, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.EMAIL = eMAIL;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByEMPLOYEE_ID(String? eMPLOYEE_ID_IR, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.EMPLOYEE_ID_IR = eMPLOYEE_ID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByJOB_ID(String jOB_ID, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.JOB_ID = jOB_ID;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByMANAGER_ID(String? mANAGER_ID_IR, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.MANAGER_ID_IR = mANAGER_ID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleDeleteByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.FIRST_NAME = fIRST_NAME;
		selectorProperties.LAST_NAME = lAST_NAME;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.DEPARTMENT_ID_IR = dEPARTMENT_ID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByEMAIL(String eMAIL)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.EMAIL = eMAIL;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.EMPLOYEE_ID_IR = eMPLOYEE_ID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByJOB_ID(String jOB_ID)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.JOB_ID = jOB_ID;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByMANAGER_ID(String? mANAGER_ID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new XE_HR_EMPLOYEES_IR();
		selectorProperties.MANAGER_ID_IR = mANAGER_ID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	//PostCRUD Handlers
	private async Task PostHandleGetAll()
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByEMAIL(String eMAIL)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByJOB_ID(String jOB_ID)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByMANAGER_ID(String? mANAGER_ID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleCreate(XE_HR_EMPLOYEES_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByDEPARTMENT_ID(String? dEPARTMENT_ID_IR, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByEMAIL(String eMAIL, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByEMPLOYEE_ID(String? eMPLOYEE_ID_IR, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByJOB_ID(String jOB_ID, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByMANAGER_ID(String? mANAGER_ID_IR, XE_HR_EMPLOYEES_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByFIRST_NAMEAndLAST_NAME(String? fIRST_NAME, String lAST_NAME)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByDEPARTMENT_ID(String? dEPARTMENT_ID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByEMAIL(String eMAIL)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByEMPLOYEE_ID(String? eMPLOYEE_ID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByJOB_ID(String jOB_ID)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByMANAGER_ID(String? mANAGER_ID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
}
