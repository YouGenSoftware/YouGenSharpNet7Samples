/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307202958 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using XE_HR_Common.IndirectReferenceTransformerModels;
using XE_HR_BackEndDatabaseClient.Repositories;
using XE_HR_Common.Validators;
using XE_HR_BackEndCommon.IndirectReferenceTransformers;
using XE_HR_BackEndCommon.Services;
namespace XE_HR_BackEndCommon.RequestHandlers;
public class XE_HR_EMP_DETAILS_VIEW_RequestHandler : IXE_HR_EMP_DETAILS_VIEW_RequestHandler
{
    private readonly ILogger<XE_HR_EMP_DETAILS_VIEW_RequestHandler> _logger;
    private readonly IEncryptionDecryptionService _encryptionDecryptionService; 
    private readonly IIRTransformers _indirectReferenceTransformers;
    private readonly IXE_HR_EMP_DETAILS_VIEW_Repository _repository;
    private readonly XE_HR_EMP_DETAILS_VIEW_IR_FluentValidator _readValidator;
    public XE_HR_EMP_DETAILS_VIEW_RequestHandler(
        ILogger<XE_HR_EMP_DETAILS_VIEW_RequestHandler> logger
        ,IEncryptionDecryptionService encryptionDecryptionService
        ,IIRTransformers indirectReferenceTransformers
        ,IXE_HR_EMP_DETAILS_VIEW_Repository repository
        ,XE_HR_EMP_DETAILS_VIEW_IR_FluentValidator readValidator
    )
    {
        _logger = logger;
        _encryptionDecryptionService = encryptionDecryptionService;
        _indirectReferenceTransformers = indirectReferenceTransformers;
        _repository = repository;
        _readValidator = readValidator;
    }
	//Main Handlers
	public async Task<IEnumerable<XE_HR_EMP_DETAILS_VIEW_IR>?> HandleGetAll()
	{
		await PreHandleGetAll();
		var retData = await _repository.GetAll();
		await PostHandleGetAll();
		return retData == null || !retData.Any() ? Enumerable.Empty<XE_HR_EMP_DETAILS_VIEW_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToArray().ToList();
	}
	//PreCRUD Handlers
	private async Task PreHandleGetAll()
	{
		// Add preCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	//PostCRUD Handlers
	private async Task PostHandleGetAll()
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
}
