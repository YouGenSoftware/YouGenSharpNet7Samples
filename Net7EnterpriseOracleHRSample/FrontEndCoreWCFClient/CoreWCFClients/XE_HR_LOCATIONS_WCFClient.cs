//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XE_HR_FrontEndCoreWCFClient.CoreWCFClients
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="XE_HR_FrontEndCoreWCFClient.CoreWCFClients.IXE_HR_LOCATIONS_Service")]
    public interface IXE_HR_LOCATIONS_Service
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetAll", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetAllResponse")]
        System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetByCITY", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetByCITYResponse")]
        System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetByCITYAsync(string cITY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetByCOUNTRY_ID", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetByCOUNTRY_IDResponse")]
        System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetByCOUNTRY_IDAsync(string cOUNTRY_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetByLOCATION_ID", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetByLOCATION_IDResponse")]
        System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetByLOCATION_IDAsync(string lOCATION_ID_IR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetBySTATE_PROVINCE", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/GetBySTATE_PROVINCEResponse")]
        System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetBySTATE_PROVINCEAsync(string sTATE_PROVINCE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/Create", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/CreateResponse")]
        System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR> CreateAsync(XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateByCITY", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateByCITYResponse")]
        System.Threading.Tasks.Task UpdateByCITYAsync(string cITY, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateByCOUNTRY_ID", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateByCOUNTRY_IDResponse")]
        System.Threading.Tasks.Task UpdateByCOUNTRY_IDAsync(string cOUNTRY_ID, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateByLOCATION_ID", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateByLOCATION_IDResponse")]
        System.Threading.Tasks.Task UpdateByLOCATION_IDAsync(string lOCATION_ID_IR, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateBySTATE_PROVINCE", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/UpdateBySTATE_PROVINCEResponse")]
        System.Threading.Tasks.Task UpdateBySTATE_PROVINCEAsync(string sTATE_PROVINCE, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteByCITY", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteByCITYResponse")]
        System.Threading.Tasks.Task DeleteByCITYAsync(string cITY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteByCOUNTRY_ID", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteByCOUNTRY_IDResponse")]
        System.Threading.Tasks.Task DeleteByCOUNTRY_IDAsync(string cOUNTRY_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteByLOCATION_ID", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteByLOCATION_IDResponse")]
        System.Threading.Tasks.Task DeleteByLOCATION_IDAsync(string lOCATION_ID_IR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteBySTATE_PROVINCE", ReplyAction="http://tempuri.org/IXE_HR_LOCATIONS_Service/DeleteBySTATE_PROVINCEResponse")]
        System.Threading.Tasks.Task DeleteBySTATE_PROVINCEAsync(string sTATE_PROVINCE);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IXE_HR_LOCATIONS_ServiceChannel : XE_HR_FrontEndCoreWCFClient.CoreWCFClients.IXE_HR_LOCATIONS_Service, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class XE_HR_LOCATIONS_ServiceClient : System.ServiceModel.ClientBase<XE_HR_FrontEndCoreWCFClient.CoreWCFClients.IXE_HR_LOCATIONS_Service>, XE_HR_FrontEndCoreWCFClient.CoreWCFClients.IXE_HR_LOCATIONS_Service
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public XE_HR_LOCATIONS_ServiceClient() : 
                base(XE_HR_LOCATIONS_ServiceClient.GetDefaultBinding(), XE_HR_LOCATIONS_ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IXE_HR_LOCATIONS_Service.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XE_HR_LOCATIONS_ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(XE_HR_LOCATIONS_ServiceClient.GetBindingForEndpoint(endpointConfiguration), XE_HR_LOCATIONS_ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XE_HR_LOCATIONS_ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(XE_HR_LOCATIONS_ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XE_HR_LOCATIONS_ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(XE_HR_LOCATIONS_ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XE_HR_LOCATIONS_ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetByCITYAsync(string cITY)
        {
            return base.Channel.GetByCITYAsync(cITY);
        }
        
        public System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetByCOUNTRY_IDAsync(string cOUNTRY_ID)
        {
            return base.Channel.GetByCOUNTRY_IDAsync(cOUNTRY_ID);
        }
        
        public System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetByLOCATION_IDAsync(string lOCATION_ID_IR)
        {
            return base.Channel.GetByLOCATION_IDAsync(lOCATION_ID_IR);
        }
        
        public System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR[]> GetBySTATE_PROVINCEAsync(string sTATE_PROVINCE)
        {
            return base.Channel.GetBySTATE_PROVINCEAsync(sTATE_PROVINCE);
        }
        
        public System.Threading.Tasks.Task<XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR> CreateAsync(XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input)
        {
            return base.Channel.CreateAsync(input);
        }
        
        public System.Threading.Tasks.Task UpdateByCITYAsync(string cITY, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input)
        {
            return base.Channel.UpdateByCITYAsync(cITY, input);
        }
        
        public System.Threading.Tasks.Task UpdateByCOUNTRY_IDAsync(string cOUNTRY_ID, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input)
        {
            return base.Channel.UpdateByCOUNTRY_IDAsync(cOUNTRY_ID, input);
        }
        
        public System.Threading.Tasks.Task UpdateByLOCATION_IDAsync(string lOCATION_ID_IR, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input)
        {
            return base.Channel.UpdateByLOCATION_IDAsync(lOCATION_ID_IR, input);
        }
        
        public System.Threading.Tasks.Task UpdateBySTATE_PROVINCEAsync(string sTATE_PROVINCE, XE_HR_Common.IndirectReferenceTransformerModels.XE_HR_LOCATIONS_IR input)
        {
            return base.Channel.UpdateBySTATE_PROVINCEAsync(sTATE_PROVINCE, input);
        }
        
        public System.Threading.Tasks.Task DeleteByCITYAsync(string cITY)
        {
            return base.Channel.DeleteByCITYAsync(cITY);
        }
        
        public System.Threading.Tasks.Task DeleteByCOUNTRY_IDAsync(string cOUNTRY_ID)
        {
            return base.Channel.DeleteByCOUNTRY_IDAsync(cOUNTRY_ID);
        }
        
        public System.Threading.Tasks.Task DeleteByLOCATION_IDAsync(string lOCATION_ID_IR)
        {
            return base.Channel.DeleteByLOCATION_IDAsync(lOCATION_ID_IR);
        }
        
        public System.Threading.Tasks.Task DeleteBySTATE_PROVINCEAsync(string sTATE_PROVINCE)
        {
            return base.Channel.DeleteBySTATE_PROVINCEAsync(sTATE_PROVINCE);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IXE_HR_LOCATIONS_Service))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IXE_HR_LOCATIONS_Service))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:5001/XE_HR_LOCATIONS_Service");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return XE_HR_LOCATIONS_ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IXE_HR_LOCATIONS_Service);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return XE_HR_LOCATIONS_ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IXE_HR_LOCATIONS_Service);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IXE_HR_LOCATIONS_Service,
        }
    }
}
