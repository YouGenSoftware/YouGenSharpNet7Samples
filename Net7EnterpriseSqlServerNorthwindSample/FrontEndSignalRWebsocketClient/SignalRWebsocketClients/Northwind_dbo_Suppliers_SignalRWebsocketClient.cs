/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200636 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.SignalR.Client;
using Northwind_Common.IndirectReferenceTransformerModels;
namespace Northwind_FrontEndSignalRWebsocketClient.SignalRWebsocketClients;
public class Northwind_dbo_Suppliers_SignalRWebsocketClient : SignalRWebsocketClientBase, INorthwind_dbo_Suppliers_SignalRWebsocketClient, IAsyncDisposable
{
	public Northwind_dbo_Suppliers_SignalRWebsocketClient(String hubUrl) : base(hubUrl)
    {
    }
	public async Task<IEnumerable<Northwind_dbo_Suppliers_IR>?> GetByBestMatchedQueryPattern(Northwind_dbo_Suppliers_IR input)
	{
		if (input == null) return null;
		IEnumerable<Northwind_dbo_Suppliers_IR>? retData;
		if (input.CompanyName_HasBeenChanged) retData = await GetByCompanyName(input.CompanyName ?? String.Empty);
		else if (input.SupplierID_IR_HasBeenChanged) retData = await GetBySupplierID(input.SupplierID_IR ?? default);
		else if (input.PostalCode_HasBeenChanged) retData = await GetByPostalCode(input.PostalCode);
		else retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(Northwind_dbo_Suppliers_IR record, Northwind_dbo_Suppliers_IR filter)
	{
		 // unencrypted properties only
		return			(!filter.CompanyName_HasBeenChanged || record.CompanyName == filter.CompanyName) &&
			(!filter.ContactName_HasBeenChanged || record.ContactName == filter.ContactName) &&
			(!filter.ContactTitle_HasBeenChanged || record.ContactTitle == filter.ContactTitle) &&
			(!filter.Address_HasBeenChanged || record.Address == filter.Address) &&
			(!filter.City_HasBeenChanged || record.City == filter.City) &&
			(!filter.Region_HasBeenChanged || record.Region == filter.Region) &&
			(!filter.PostalCode_HasBeenChanged || record.PostalCode == filter.PostalCode) &&
			(!filter.Country_HasBeenChanged || record.Country == filter.Country) &&
			(!filter.Phone_HasBeenChanged || record.Phone == filter.Phone) &&
			(!filter.Fax_HasBeenChanged || record.Fax == filter.Fax) &&
			(!filter.HomePage_HasBeenChanged || record.HomePage == filter.HomePage);
	}
	public async Task<IEnumerable<Northwind_dbo_Suppliers_IR>?> GetAll()
	{
		return await _hubConnection.InvokeAsync<IEnumerable<Northwind_dbo_Suppliers_IR>?>("GetAll");
	}
	public async Task<IEnumerable<Northwind_dbo_Suppliers_IR>?> GetByCompanyName(String companyName)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<Northwind_dbo_Suppliers_IR>?>("GetByCompanyName", companyName);
	}
	public async Task<IEnumerable<Northwind_dbo_Suppliers_IR>?> GetBySupplierID(String? supplierID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<Northwind_dbo_Suppliers_IR>?>("GetBySupplierID", supplierID_IR);
	}
	public async Task<IEnumerable<Northwind_dbo_Suppliers_IR>?> GetByPostalCode(String? postalCode)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<Northwind_dbo_Suppliers_IR>?>("GetByPostalCode", postalCode);
	}
	public async Task<Northwind_dbo_Suppliers_IR?> Create(Northwind_dbo_Suppliers_IR input)
	{
		return await _hubConnection.InvokeAsync<Northwind_dbo_Suppliers_IR?>("Create", input);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, Northwind_dbo_Suppliers_IR updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateBySupplierID(inputSplits[0], updateModel);
	}
	public async Task UpdateByCompanyName(String companyName, Northwind_dbo_Suppliers_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByCompanyName", companyName, input);
	}
	public async Task UpdateBySupplierID(String? supplierID_IR, Northwind_dbo_Suppliers_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateBySupplierID", supplierID_IR, input);
	}
	public async Task UpdateByPostalCode(String? postalCode, Northwind_dbo_Suppliers_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByPostalCode", postalCode, input);
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteBySupplierID(inputSplits[0]);
	}
	public async Task DeleteByCompanyName(String companyName)
	{
		await _hubConnection.InvokeAsync("DeleteByCompanyName", companyName);
	}
	public async Task DeleteBySupplierID(String? supplierID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteBySupplierID", supplierID_IR);
	}
	public async Task DeleteByPostalCode(String? postalCode)
	{
		await _hubConnection.InvokeAsync("DeleteByPostalCode", postalCode);
	}
    public async Task InitializeAsync()
    {
        await base.EstablishConnection();
    }
    public Boolean GetStatus()
    {
        return base.Initiated;
    }
    public async ValueTask DisposeAsync()
    {
        await base.TerminateConnection();
        GC.SuppressFinalize(this);
    }
}
