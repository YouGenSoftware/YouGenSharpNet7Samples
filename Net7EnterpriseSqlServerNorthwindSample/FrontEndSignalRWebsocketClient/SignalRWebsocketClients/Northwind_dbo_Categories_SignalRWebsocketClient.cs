/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200636 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.SignalR.Client;
using Northwind_Common.IndirectReferenceTransformerModels;
namespace Northwind_FrontEndSignalRWebsocketClient.SignalRWebsocketClients;
public class Northwind_dbo_Categories_SignalRWebsocketClient : SignalRWebsocketClientBase, INorthwind_dbo_Categories_SignalRWebsocketClient, IAsyncDisposable
{
	public Northwind_dbo_Categories_SignalRWebsocketClient(String hubUrl) : base(hubUrl)
    {
    }
	public async Task<IEnumerable<Northwind_dbo_Categories_IR>?> GetByBestMatchedQueryPattern(Northwind_dbo_Categories_IR input)
	{
		if (input == null) return null;
		IEnumerable<Northwind_dbo_Categories_IR>? retData;
		if (input.CategoryName_HasBeenChanged) retData = await GetByCategoryName(input.CategoryName ?? String.Empty);
		else if (input.CategoryID_IR_HasBeenChanged) retData = await GetByCategoryID(input.CategoryID_IR ?? default);
		else retData = await GetAll();
		return retData == null ? null : retData.Where(x => WhereAllFilledFields(x, input));
	}
	private static Boolean WhereAllFilledFields(Northwind_dbo_Categories_IR record, Northwind_dbo_Categories_IR filter)
	{
		 // unencrypted properties only
		return			(!filter.CategoryName_HasBeenChanged || record.CategoryName == filter.CategoryName) &&
			(!filter.Description_HasBeenChanged || record.Description == filter.Description) &&
			(!filter.Picture_HasBeenChanged || record.Picture == filter.Picture);
	}
	public async Task<IEnumerable<Northwind_dbo_Categories_IR>?> GetAll()
	{
		return await _hubConnection.InvokeAsync<IEnumerable<Northwind_dbo_Categories_IR>?>("GetAll");
	}
	public async Task<IEnumerable<Northwind_dbo_Categories_IR>?> GetByCategoryName(String categoryName)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<Northwind_dbo_Categories_IR>?>("GetByCategoryName", categoryName);
	}
	public async Task<IEnumerable<Northwind_dbo_Categories_IR>?> GetByCategoryID(String? categoryID_IR)
	{
		return await _hubConnection.InvokeAsync<IEnumerable<Northwind_dbo_Categories_IR>?>("GetByCategoryID", categoryID_IR);
	}
	public async Task<Northwind_dbo_Categories_IR?> Create(Northwind_dbo_Categories_IR input)
	{
		return await _hubConnection.InvokeAsync<Northwind_dbo_Categories_IR?>("Create", input);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, Northwind_dbo_Categories_IR updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByCategoryID(inputSplits[0], updateModel);
	}
	public async Task UpdateByCategoryName(String categoryName, Northwind_dbo_Categories_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByCategoryName", categoryName, input);
	}
	public async Task UpdateByCategoryID(String? categoryID_IR, Northwind_dbo_Categories_IR input)
	{
		await _hubConnection.InvokeAsync("UpdateByCategoryID", categoryID_IR, input);
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByCategoryID(inputSplits[0]);
	}
	public async Task DeleteByCategoryName(String categoryName)
	{
		await _hubConnection.InvokeAsync("DeleteByCategoryName", categoryName);
	}
	public async Task DeleteByCategoryID(String? categoryID_IR)
	{
		await _hubConnection.InvokeAsync("DeleteByCategoryID", categoryID_IR);
	}
    public async Task InitializeAsync()
    {
        await base.EstablishConnection();
    }
    public Boolean GetStatus()
    {
        return base.Initiated;
    }
    public async ValueTask DisposeAsync()
    {
        await base.TerminateConnection();
        GC.SuppressFinalize(this);
    }
}
