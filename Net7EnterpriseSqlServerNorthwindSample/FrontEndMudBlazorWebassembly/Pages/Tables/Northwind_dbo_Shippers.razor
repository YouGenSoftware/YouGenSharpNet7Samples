<!-- **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200636 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 -->
@implements IDisposable
@page "/tables/Northwind_dbo_Shippers/" 
@page "/tables/Northwind_dbo_Shippers/{primaryKey}" 
@inherits ComponentBaseOverrider
<PageTitle>@modelName</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@modelName</MudText>
@if (waiting == true)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudText><strong>Data fetch filters</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudCard>
                    <MudCardContent>
                        <MudForm Model="@searchModel" @ref="@searchForm" Validation="@(() => searchValidator.ValidateValue)" ValidationDelay="0">
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@searchModel.ShipperID_IR"
	For="@(() => searchModel.ShipperID_IR)"
	ReadOnly="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="CompanyName"
	@bind-Value="@searchModel.CompanyName"
	For="@(() => searchModel.CompanyName)"
	Clearable="false"
	Lines="0"
	MaxLength="40"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="Phone"
	@bind-Value="@searchModel.Phone"
	For="@(() => searchModel.Phone)"
	Clearable="true"
	Lines="0"
	MaxLength="24"
	Immediate="true" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Search(retrieveAll: true))">Retrieve all records</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Search())">Retrieve records by criteria</MudButton>
                    </MudCardActions>
                </MudCard>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudTable T="Northwind_dbo_Shippers_IR" @ref="primaryTable"
          RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"
          Items="retrievedRecords" HorizontalScrollbar="true" Hover="true"
          SortLabel="Sort By" Filter="new Func<Northwind_dbo_Shippers_IR,Boolean>(FilterFuncAll)"
          Virtualize="true" FixedHeader="true">
        <ToolBarContent>
            <MudTextField @bind-Value="searchFilterText" Placeholder="Filter retrieved records" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
			<HeaderContent>
			<!-- <MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Shippers_IR, object>(x=>x.ShipperID!)">ShipperID</MudTableSortLabel></MudTh> -->
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Shippers_IR, object>(x=>x.CompanyName!)">CompanyName</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel SortBy="new Func<Northwind_dbo_Shippers_IR, object>(x=>x.Phone!)">Phone</MudTableSortLabel></MudTh>
			<MudTh>Referenced Records</MudTh>
			<MudTh>Update</MudTh>
			<MudTh>Delete</MudTh>
		</HeaderContent>
		<RowTemplate>
			<!-- <MudTd DataLabel="ShipperID">@context.ShipperID</MudTd> -->
			<MudTd DataLabel="CompanyName">@context.CompanyName</MudTd>
			<MudTd DataLabel="Phone">@context.Phone</MudTd>
			<MudTd DataLabel="Show Referenced Records"><MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@(() => ShowReferencedRecords(context))">@((rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys) ? "Hide" : "Show") Referenced Records</MudButton></MudTd>
			<MudTd DataLabel="Update"><MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@(() => ShowUpdateRecord(context))">@((rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit) ? "Hide" : "Show") Update</MudButton></MudTd>
			<MudTd DataLabel="Delete"><MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@(() => ShowDeleteRecord(context))">@((rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete) ? "Hide" : "Show") Delete</MudButton></MudTd>
		</RowTemplate>
        <ChildRowContent>
            @if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys)
            {
                <MudTr>
                    <td colspan="6">
                        <MudCard Class="px-6">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText><strong>Referenced Records</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudGrid Class="pb-2" Spacing="1" Justify="Justify.FlexStart">
                            </MudGrid>
                        </MudCard>
                    </td>
                </MudTr>
            }
            @if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit)
            {
                <MudTr>
                    <td colspan="6">
                        <MudCard Class="px-6">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText><strong>Update this record?</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudForm Model="@updateModel" @ref="@updateForm" Validation="@(() => updateValidator.ValidateValue)" ValidationDelay="0">
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@updateModel.PrimaryKeyEncryptedForUpdateDeleteIdentification"
	For="@(() => updateModel.PrimaryKeyEncryptedForUpdateDeleteIdentification)"
	ReadOnly="true" />
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@updateModel.PrimaryKeyHashedForUniqueObjectComparison"
	For="@(() => updateModel.PrimaryKeyHashedForUniqueObjectComparison)"
	ReadOnly="true" />
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@updateModel.ShipperID_IR"
	For="@(() => updateModel.ShipperID_IR)"
	ReadOnly="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="CompanyName"
	@bind-Value="@updateModel.CompanyName"
	For="@(() => updateModel.CompanyName)"
	Clearable="false"
	Lines="0"
	MaxLength="40"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="Phone"
	@bind-Value="@updateModel.Phone"
	For="@(() => updateModel.Phone)"
	Clearable="true"
	Lines="0"
	MaxLength="24"
	Immediate="true" />
                                </MudForm>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Update())">Update record</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </td>
                </MudTr>
            }
            @if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete)
            {
                <MudTr>
                    <td colspan="6">
                        <MudCard Class="px-6">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText><strong>Delete this record?</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudForm Model="@deleteModel" @ref="@deleteForm">
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@deleteModel.PrimaryKeyEncryptedForUpdateDeleteIdentification"
	For="@(() => deleteModel.PrimaryKeyEncryptedForUpdateDeleteIdentification)"
	ReadOnly="true" />
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@deleteModel.PrimaryKeyHashedForUniqueObjectComparison"
	For="@(() => deleteModel.PrimaryKeyHashedForUniqueObjectComparison)"
	ReadOnly="true" />
                                    <MudText>Note: Clicking "Delete record" will permanently delete this record and any data associated.</MudText>
                                </MudForm>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Delete())">Delete record</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 50}" />
        </PagerContent>
    </MudTable>
    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudText><strong>@("Add new " + modelName)</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudCard>
                    <MudCardContent>
                        <MudForm Model="@addModel" @ref="@addForm" Validation="@(() => addValidator.ValidateValue)" ValidationDelay="0">
<MudTextField
	Class="d-none"
	InputType="InputType.Hidden" 
	@bind-Value="@addModel.ShipperID_IR"
	For="@(() => addModel.ShipperID_IR)"
	ReadOnly="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="CompanyName"
	@bind-Value="@addModel.CompanyName"
	For="@(() => addModel.CompanyName)"
	Clearable="false"
	Lines="0"
	MaxLength="40"
	Immediate="true" />
<MudTextField
	InputType="InputType.Text" 
	Variant="Variant.Text"
	Label="Phone"
	@bind-Value="@addModel.Phone"
	For="@(() => addModel.Phone)"
	Clearable="true"
	Lines="0"
	MaxLength="24"
	Immediate="true" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto" OnClick="@(async () => await Add())">Add record</MudButton>
                    </MudCardActions>
                </MudCard>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
}
@code {
    [Parameter]
    public String? PrimaryKey { get; set; }
	[Inject]
	private Northwind_dbo_Shippers_HttpClient? httpClient { get; set; } = default!;
	// [Inject]
	// private Northwind_dbo_Shippers_SignalRWebsocketClient? websocketClient { get; set; } = default!;
    [Inject] 
    private Northwind_dbo_Shippers_IR_FluentValidator_Create addValidator { get; set; } = default!;
    [Inject] 
    private Northwind_dbo_Shippers_IR_FluentValidator_Read searchValidator { get; set; } = default!;
    [Inject] 
    private Northwind_dbo_Shippers_IR_FluentValidator_Update updateValidator { get; set; } = default!;
    [Inject] 
    private Northwind_dbo_Shippers_IR_FluentValidator_Delete deleteValidator { get; set; } = default!;
    private MudForm? searchForm = new MudForm();
    private MudForm? addForm = new MudForm();
    private MudForm? updateForm = new MudForm();
    private MudForm? deleteForm = new MudForm();    
    private MudTable<Northwind_dbo_Shippers_IR>? primaryTable = new MudTable<Northwind_dbo_Shippers_IR>();
    private String searchFilterText = "";
    private Northwind_dbo_Shippers_IR searchModel = new Northwind_dbo_Shippers_IR();
    private Northwind_dbo_Shippers_IR addModel = new Northwind_dbo_Shippers_IR();
    private Northwind_dbo_Shippers_IR updateModel = new Northwind_dbo_Shippers_IR();
    private Northwind_dbo_Shippers_IR deleteModel = new Northwind_dbo_Shippers_IR();
    private Northwind_dbo_Shippers_IR referencesModel = new Northwind_dbo_Shippers_IR();
    private IEnumerable<Northwind_dbo_Shippers_IR>? retrievedRecords;
    private Dictionary<String, RecordTracking> rowTrackDictionary = new Dictionary<String, RecordTracking>();
    private String modelName = "Northwind_dbo_Shippers_IR";
    private Boolean waiting;
    private Boolean FilterFuncAll(Northwind_dbo_Shippers_IR element) => FilterFunc(element, searchFilterText);
    private Boolean FilterFunc(Northwind_dbo_Shippers_IR element, String searchString)
    {
        if (String.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{ element.ShipperID_IR } { element.CompanyName } { element.Phone }".Contains(searchString))        
            return true;
        return false;
    }
    private void RowClickEvent(TableRowClickEventArgs<Northwind_dbo_Shippers_IR> tableRowClickEventArgs)
	{
	}
    private String SelectedRowClassFunc(Northwind_dbo_Shippers_IR element, Int32 rowNumber)
    {
        if (primaryTable!.SelectedItem != null && primaryTable!.SelectedItem.Equals(element))
            return "selected";
        else
            return String.Empty;
    }
    private async Task Search(Boolean retrieveAll = false)
    {
        if (!retrieveAll)
            await searchForm!.Validate();
        if (!retrieveAll && !searchForm!.IsValid)
            return;
        waiting = true;
        retrievedRecords = retrieveAll ? await httpClient!.GetAll() : await httpClient!.GetByBestMatchedQueryPattern(searchModel);
        // retrievedRecords = retrieveAll ? await websocketClient!.GetAll() : await websocketClient!.GetByBestMatchedQueryPattern(searchModel);
        rowTrackDictionary.Clear();
        foreach (var rec in retrievedRecords!)
            rowTrackDictionary.Add(rec.PrimaryKeyEncryptedForUpdateDeleteIdentification!, new RecordTracking());
        waiting = false;
        StateHasChanged();
    }
    private async Task Add()
    {        
        await addForm!.Validate();
        if (!addForm!.IsValid)
            return;
        waiting = true;
        StateHasChanged();
        await httpClient!.Create(addModel);
        // await websocketClient!.Create(addModel);
        waiting = false;
        StateHasChanged();
    }
    private async Task Update()
    {
        await updateForm!.Validate();
        if (!updateForm!.IsValid)
            return;
        waiting = true;
        StateHasChanged();        
		await httpClient!.UpdateByEncodedPrimaryKey(updateModel.PrimaryKeyEncryptedForUpdateDeleteIdentification!, updateModel);
		// await websocketClient!.UpdateByEncodedPrimaryKey(updateModel.PrimaryKeyEncryptedForUpdateDeleteIdentification!, updateModel);
        waiting = false;
        StateHasChanged();
    }
    private async Task Delete()
    {
        await deleteForm!.Validate();
        if (!deleteForm!.IsValid)
            return;
        waiting = true;
        StateHasChanged();        
		await httpClient!.DeleteByEncodedPrimaryKey(updateModel.PrimaryKeyEncryptedForUpdateDeleteIdentification!);
		// await websocketClient!.DeleteByEncodedPrimaryKey(updateModel.PrimaryKeyEncryptedForUpdateDeleteIdentification!);
        waiting = false;
        StateHasChanged();
    }
    private void ShowReferencedRecords(Northwind_dbo_Shippers_IR context)
    {
        referencesModel = context;
        if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit)
            rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit = false;
        if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete)
            rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete = false;
        rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys = !rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys;
    }
    private void ShowUpdateRecord(Northwind_dbo_Shippers_IR context)
    {
        updateModel = context;
        if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys)
            rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys = false;
        if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete)
            rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete = false;
        rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit = !rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit;
    }
    private void ShowDeleteRecord(Northwind_dbo_Shippers_IR context)
    {
        deleteModel = context;
        if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys)
            rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsViewForeignKeys = false;
        if (rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit)
            rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsEdit = false;
        rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete = !rowTrackDictionary[context.PrimaryKeyEncryptedForUpdateDeleteIdentification!].IsDelete;
    }
    private void ParsePrimaryKeyParameter()
    {
        //parse the primary key into the searchModel properties
		var splitPrimaryKey = PrimaryKey!.Split((Char)27);
		searchModel.ShipperID_IR = splitPrimaryKey[0];
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
	// await websocketClient!.InitializeAsync();
    }
    protected override async Task OnParametersSetAsync() 
    {
        if (!String.IsNullOrWhiteSpace(PrimaryKey))
        {
            ParsePrimaryKeyParameter();
            await Search();
        }
        await base.OnParametersSetAsync();
    }
    public void Dispose()
    {
	// websocketClient?.DisposeAsync();
	// websocketClient = null;
    }
}
