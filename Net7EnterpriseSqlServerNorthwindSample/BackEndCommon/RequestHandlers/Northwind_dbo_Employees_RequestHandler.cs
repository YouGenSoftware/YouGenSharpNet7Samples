/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200636 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Northwind_Common.IndirectReferenceTransformerModels;
using Northwind_BackEndDatabaseClient.Repositories;
using Northwind_Common.Validators;
using Northwind_BackEndCommon.IndirectReferenceTransformers;
using Northwind_BackEndCommon.Services;
namespace Northwind_BackEndCommon.RequestHandlers;
public class Northwind_dbo_Employees_RequestHandler : INorthwind_dbo_Employees_RequestHandler
{
    private readonly ILogger<Northwind_dbo_Employees_RequestHandler> _logger;
    private readonly IEncryptionDecryptionService _encryptionDecryptionService; 
    private readonly IIRTransformers _indirectReferenceTransformers;
    private readonly INorthwind_dbo_Employees_Repository _repository;
    private readonly Northwind_dbo_Employees_IR_FluentValidator_Create _createValidator;
    private readonly Northwind_dbo_Employees_IR_FluentValidator_Read _readValidator;
    private readonly Northwind_dbo_Employees_IR_FluentValidator_Update _updateValidator;
    private readonly Northwind_dbo_Employees_IR_FluentValidator_Delete _deleteValidator;
    public Northwind_dbo_Employees_RequestHandler(
        ILogger<Northwind_dbo_Employees_RequestHandler> logger
        ,IEncryptionDecryptionService encryptionDecryptionService
        ,IIRTransformers indirectReferenceTransformers
        ,INorthwind_dbo_Employees_Repository repository 
        ,Northwind_dbo_Employees_IR_FluentValidator_Create createValidator
        ,Northwind_dbo_Employees_IR_FluentValidator_Read readValidator
        ,Northwind_dbo_Employees_IR_FluentValidator_Update updateValidator
        ,Northwind_dbo_Employees_IR_FluentValidator_Delete deleteValidator
    )
    {
        _logger = logger;
        _encryptionDecryptionService = encryptionDecryptionService;
        _indirectReferenceTransformers = indirectReferenceTransformers;
        _repository = repository;
        _createValidator = createValidator;
        _readValidator = readValidator;
        _updateValidator = updateValidator;
        _deleteValidator = deleteValidator;
    }
	//Main Handlers
	public async Task<IEnumerable<Northwind_dbo_Employees_IR>?> HandleGetAll()
	{
		await PreHandleGetAll();
		var retData = await _repository.GetAll();
		await PostHandleGetAll();
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Employees_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Employees_IR>?> HandleGetByLastName(String lastName)
	{
		await PreHandleGetByLastName(lastName);
		var retData = await _repository.GetByLastName((lastName));
		await PostHandleGetByLastName(lastName);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Employees_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Employees_IR>?> HandleGetByEmployeeID(String? employeeID_IR)
	{
		await PreHandleGetByEmployeeID(employeeID_IR);
		var retData = await _repository.GetByEmployeeID(_encryptionDecryptionService.DecInt32(employeeID_IR));
		await PostHandleGetByEmployeeID(employeeID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Employees_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Employees_IR>?> HandleGetByPostalCode(String? postalCode)
	{
		await PreHandleGetByPostalCode(postalCode);
		var retData = await _repository.GetByPostalCode((postalCode));
		await PostHandleGetByPostalCode(postalCode);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Employees_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<Northwind_dbo_Employees_IR?> HandleCreate<T>(T irModel) where T : Northwind_dbo_Employees_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleCreate(irModel);
		entity = await _repository.Create(entity!);
		if (entity != null) 
		{
			await PostHandleCreate(irModel);
			return _indirectReferenceTransformers.ToIndirectModel(entity!);
		}
		else
			return null;
	}
	public async Task HandleUpdateByLastName<T>(String lastName, T irModel) where T : Northwind_dbo_Employees_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByLastName(lastName, irModel);
		await _repository.UpdateByLastName((lastName), entity!);
		await PostHandleUpdateByLastName(lastName, irModel);
	}
	public async Task HandleUpdateByEmployeeID<T>(String? employeeID_IR, T irModel) where T : Northwind_dbo_Employees_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByEmployeeID(employeeID_IR, irModel);
		await _repository.UpdateByEmployeeID(_encryptionDecryptionService.DecInt32(employeeID_IR), entity!);
		await PostHandleUpdateByEmployeeID(employeeID_IR, irModel);
	}
	public async Task HandleUpdateByPostalCode<T>(String? postalCode, T irModel) where T : Northwind_dbo_Employees_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByPostalCode(postalCode, irModel);
		await _repository.UpdateByPostalCode((postalCode), entity!);
		await PostHandleUpdateByPostalCode(postalCode, irModel);
	}
	public async Task HandleDeleteByLastName(String lastName)
	{
		await PreHandleDeleteByLastName(lastName);
		await _repository.DeleteByLastName((lastName));
		await PostHandleDeleteByLastName(lastName);
	}
	public async Task HandleDeleteByEmployeeID(String? employeeID_IR)
	{
		await PreHandleDeleteByEmployeeID(employeeID_IR);
		await _repository.DeleteByEmployeeID(_encryptionDecryptionService.DecInt32(employeeID_IR));
		await PostHandleDeleteByEmployeeID(employeeID_IR);
	}
	public async Task HandleDeleteByPostalCode(String? postalCode)
	{
		await PreHandleDeleteByPostalCode(postalCode);
		await _repository.DeleteByPostalCode((postalCode));
		await PostHandleDeleteByPostalCode(postalCode);
	}
	//PreCRUD Handlers
	private async Task PreHandleGetAll()
	{
		// Add preCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PreHandleGetByLastName(String lastName)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.LastName = lastName;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByEmployeeID(String? employeeID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.EmployeeID_IR = employeeID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByPostalCode(String? postalCode)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.PostalCode = postalCode;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleCreate(Northwind_dbo_Employees_IR irModel)
	{
		// Add preCRUD calls/events
		await _createValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByLastName(String lastName, Northwind_dbo_Employees_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.LastName = lastName;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByEmployeeID(String? employeeID_IR, Northwind_dbo_Employees_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.EmployeeID_IR = employeeID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByPostalCode(String? postalCode, Northwind_dbo_Employees_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.PostalCode = postalCode;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleDeleteByLastName(String lastName)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.LastName = lastName;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByEmployeeID(String? employeeID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.EmployeeID_IR = employeeID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByPostalCode(String? postalCode)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Employees_IR();
		selectorProperties.PostalCode = postalCode;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	//PostCRUD Handlers
	private async Task PostHandleGetAll()
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByLastName(String lastName)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByEmployeeID(String? employeeID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByPostalCode(String? postalCode)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleCreate(Northwind_dbo_Employees_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByLastName(String lastName, Northwind_dbo_Employees_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByEmployeeID(String? employeeID_IR, Northwind_dbo_Employees_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByPostalCode(String? postalCode, Northwind_dbo_Employees_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByLastName(String lastName)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByEmployeeID(String? employeeID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByPostalCode(String? postalCode)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
}
