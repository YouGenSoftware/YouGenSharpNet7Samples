/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200636 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Northwind_Common.IndirectReferenceTransformerModels;
using Northwind_BackEndDatabaseClient.Repositories;
using Northwind_Common.Validators;
using Northwind_BackEndCommon.IndirectReferenceTransformers;
using Northwind_BackEndCommon.Services;
namespace Northwind_BackEndCommon.RequestHandlers;
public class Northwind_dbo_Products_RequestHandler : INorthwind_dbo_Products_RequestHandler
{
    private readonly ILogger<Northwind_dbo_Products_RequestHandler> _logger;
    private readonly IEncryptionDecryptionService _encryptionDecryptionService; 
    private readonly IIRTransformers _indirectReferenceTransformers;
    private readonly INorthwind_dbo_Products_Repository _repository;
    private readonly Northwind_dbo_Products_IR_FluentValidator_Create _createValidator;
    private readonly Northwind_dbo_Products_IR_FluentValidator_Read _readValidator;
    private readonly Northwind_dbo_Products_IR_FluentValidator_Update _updateValidator;
    private readonly Northwind_dbo_Products_IR_FluentValidator_Delete _deleteValidator;
    public Northwind_dbo_Products_RequestHandler(
        ILogger<Northwind_dbo_Products_RequestHandler> logger
        ,IEncryptionDecryptionService encryptionDecryptionService
        ,IIRTransformers indirectReferenceTransformers
        ,INorthwind_dbo_Products_Repository repository 
        ,Northwind_dbo_Products_IR_FluentValidator_Create createValidator
        ,Northwind_dbo_Products_IR_FluentValidator_Read readValidator
        ,Northwind_dbo_Products_IR_FluentValidator_Update updateValidator
        ,Northwind_dbo_Products_IR_FluentValidator_Delete deleteValidator
    )
    {
        _logger = logger;
        _encryptionDecryptionService = encryptionDecryptionService;
        _indirectReferenceTransformers = indirectReferenceTransformers;
        _repository = repository;
        _createValidator = createValidator;
        _readValidator = readValidator;
        _updateValidator = updateValidator;
        _deleteValidator = deleteValidator;
    }
	//Main Handlers
	public async Task<IEnumerable<Northwind_dbo_Products_IR>?> HandleGetAll()
	{
		await PreHandleGetAll();
		var retData = await _repository.GetAll();
		await PostHandleGetAll();
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Products_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Products_IR>?> HandleGetByCategoryID(String? categoryID_IR)
	{
		await PreHandleGetByCategoryID(categoryID_IR);
		var retData = await _repository.GetByCategoryID(_encryptionDecryptionService.DecInt32Nullable(categoryID_IR));
		await PostHandleGetByCategoryID(categoryID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Products_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Products_IR>?> HandleGetByProductID(String? productID_IR)
	{
		await PreHandleGetByProductID(productID_IR);
		var retData = await _repository.GetByProductID(_encryptionDecryptionService.DecInt32(productID_IR));
		await PostHandleGetByProductID(productID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Products_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Products_IR>?> HandleGetByProductName(String productName)
	{
		await PreHandleGetByProductName(productName);
		var retData = await _repository.GetByProductName((productName));
		await PostHandleGetByProductName(productName);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Products_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<IEnumerable<Northwind_dbo_Products_IR>?> HandleGetBySupplierID(String? supplierID_IR)
	{
		await PreHandleGetBySupplierID(supplierID_IR);
		var retData = await _repository.GetBySupplierID(_encryptionDecryptionService.DecInt32Nullable(supplierID_IR));
		await PostHandleGetBySupplierID(supplierID_IR);
		return retData == null || !retData.Any() ? Enumerable.Empty<Northwind_dbo_Products_IR>() : retData.Select(x => _indirectReferenceTransformers.ToIndirectModel(x)!).ToList();
	}
	public async Task<Northwind_dbo_Products_IR?> HandleCreate<T>(T irModel) where T : Northwind_dbo_Products_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleCreate(irModel);
		entity = await _repository.Create(entity!);
		if (entity != null) 
		{
			await PostHandleCreate(irModel);
			return _indirectReferenceTransformers.ToIndirectModel(entity!);
		}
		else
			return null;
	}
	public async Task HandleUpdateByCategoryID<T>(String? categoryID_IR, T irModel) where T : Northwind_dbo_Products_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByCategoryID(categoryID_IR, irModel);
		await _repository.UpdateByCategoryID(_encryptionDecryptionService.DecInt32Nullable(categoryID_IR), entity!);
		await PostHandleUpdateByCategoryID(categoryID_IR, irModel);
	}
	public async Task HandleUpdateByProductID<T>(String? productID_IR, T irModel) where T : Northwind_dbo_Products_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByProductID(productID_IR, irModel);
		await _repository.UpdateByProductID(_encryptionDecryptionService.DecInt32(productID_IR), entity!);
		await PostHandleUpdateByProductID(productID_IR, irModel);
	}
	public async Task HandleUpdateByProductName<T>(String productName, T irModel) where T : Northwind_dbo_Products_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateByProductName(productName, irModel);
		await _repository.UpdateByProductName((productName), entity!);
		await PostHandleUpdateByProductName(productName, irModel);
	}
	public async Task HandleUpdateBySupplierID<T>(String? supplierID_IR, T irModel) where T : Northwind_dbo_Products_IR
	{
		var entity = _indirectReferenceTransformers.ToEntity(irModel);
		await PreHandleUpdateBySupplierID(supplierID_IR, irModel);
		await _repository.UpdateBySupplierID(_encryptionDecryptionService.DecInt32Nullable(supplierID_IR), entity!);
		await PostHandleUpdateBySupplierID(supplierID_IR, irModel);
	}
	public async Task HandleDeleteByCategoryID(String? categoryID_IR)
	{
		await PreHandleDeleteByCategoryID(categoryID_IR);
		await _repository.DeleteByCategoryID(_encryptionDecryptionService.DecInt32Nullable(categoryID_IR));
		await PostHandleDeleteByCategoryID(categoryID_IR);
	}
	public async Task HandleDeleteByProductID(String? productID_IR)
	{
		await PreHandleDeleteByProductID(productID_IR);
		await _repository.DeleteByProductID(_encryptionDecryptionService.DecInt32(productID_IR));
		await PostHandleDeleteByProductID(productID_IR);
	}
	public async Task HandleDeleteByProductName(String productName)
	{
		await PreHandleDeleteByProductName(productName);
		await _repository.DeleteByProductName((productName));
		await PostHandleDeleteByProductName(productName);
	}
	public async Task HandleDeleteBySupplierID(String? supplierID_IR)
	{
		await PreHandleDeleteBySupplierID(supplierID_IR);
		await _repository.DeleteBySupplierID(_encryptionDecryptionService.DecInt32Nullable(supplierID_IR));
		await PostHandleDeleteBySupplierID(supplierID_IR);
	}
	//PreCRUD Handlers
	private async Task PreHandleGetAll()
	{
		// Add preCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PreHandleGetByCategoryID(String? categoryID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.CategoryID_IR = categoryID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByProductID(String? productID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.ProductID_IR = productID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetByProductName(String productName)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.ProductName = productName;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleGetBySupplierID(String? supplierID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.SupplierID_IR = supplierID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleCreate(Northwind_dbo_Products_IR irModel)
	{
		// Add preCRUD calls/events
		await _createValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByCategoryID(String? categoryID_IR, Northwind_dbo_Products_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.CategoryID_IR = categoryID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByProductID(String? productID_IR, Northwind_dbo_Products_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.ProductID_IR = productID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateByProductName(String productName, Northwind_dbo_Products_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.ProductName = productName;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleUpdateBySupplierID(String? supplierID_IR, Northwind_dbo_Products_IR irModel)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.SupplierID_IR = supplierID_IR;
		await _readValidator.ValidateModelAndThrow(selectorProperties);
		await _updateValidator.ValidateModelAndThrow(irModel);
	}
	private async Task PreHandleDeleteByCategoryID(String? categoryID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.CategoryID_IR = categoryID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByProductID(String? productID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.ProductID_IR = productID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteByProductName(String productName)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.ProductName = productName;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	private async Task PreHandleDeleteBySupplierID(String? supplierID_IR)
	{
		// Add preCRUD calls/events
		var selectorProperties = new Northwind_dbo_Products_IR();
		selectorProperties.SupplierID_IR = supplierID_IR;
		await _deleteValidator.ValidateModelAndThrow(selectorProperties);
	}
	//PostCRUD Handlers
	private async Task PostHandleGetAll()
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByCategoryID(String? categoryID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByProductID(String? productID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetByProductName(String productName)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleGetBySupplierID(String? supplierID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleCreate(Northwind_dbo_Products_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByCategoryID(String? categoryID_IR, Northwind_dbo_Products_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByProductID(String? productID_IR, Northwind_dbo_Products_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateByProductName(String productName, Northwind_dbo_Products_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleUpdateBySupplierID(String? supplierID_IR, Northwind_dbo_Products_IR irModel)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByCategoryID(String? categoryID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByProductID(String? productID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteByProductName(String productName)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
	private async Task PostHandleDeleteBySupplierID(String? supplierID_IR)
	{
		// Add postCRUD calls/events
		// Remove the line below after adding optional async logic
		await Task.CompletedTask;
	}
}
