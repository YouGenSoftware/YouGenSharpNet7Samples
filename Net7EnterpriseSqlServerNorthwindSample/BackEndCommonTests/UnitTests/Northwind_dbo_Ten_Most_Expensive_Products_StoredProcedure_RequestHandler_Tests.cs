/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200636 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Northwind_BackEndCommonTests.RequestHandlerUnitTests;
using Northwind_BackEndDatabaseClient.Repositories;
using Northwind_BackEndSqlEntities.Entities;
using Northwind_Common.IndirectReferenceTransformerModels;
using Northwind_Common.Validators;
using Northwind_BackEndCommon.IndirectReferenceTransformers;
using Northwind_BackEndCommon.RequestHandlers;
using Northwind_BackEndDatabaseClientTests.HydratedStaticEntities;
using Northwind_CommonTests.HydratedStaticIndirectReferenceTransformerModels;
using Northwind_BackEndDatabaseClientTests.HydratedDynamicEntities;
using Northwind_CommonTests.HydratedDynamicIndirectReferenceTransformerModels;
namespace Northwind_BackEndCommonTests;
[TestClass()]
public class Northwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_RequestHandler_UnitTests : RequestHandlerUnitTestBase
{
    private Mock<ILogger<Northwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_RequestHandler>>? _logger;
	private Northwind_HydratedStaticEntities? _staticEntities;
	private Northwind_HydratedStaticIndirectReferenceTransformerModels? _staticIRModels;
	private Northwind_HydratedDynamicEntities? _dynamicEntities;
	private Northwind_HydratedDynamicIndirectReferenceTransformerModels? _dynamicIRModels;
	private Mock<INorthwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_Repository>? _staticRepository;
	private Mock<IIRTransformers>? _staticIndirectReferenceTransformers;
	private INorthwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_RequestHandler? _staticRequestHandler;
	private Mock<INorthwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_Repository>? _dynamicRepository;
	private Mock<IIRTransformers>? _dynamicIndirectReferenceTransformers;
	private INorthwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_RequestHandler? _dynamicRequestHandler;
	[TestInitialize()]
    public override void Init()
    {
        base.Init();
        _logger = new Mock<ILogger<Northwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_RequestHandler>>();		
		_staticEntities = new Northwind_HydratedStaticEntities();
		_staticIRModels = new Northwind_HydratedStaticIndirectReferenceTransformerModels();
		_staticIndirectReferenceTransformers = new Mock<IIRTransformers>();
		_staticIndirectReferenceTransformers!.Setup(x => x.ToIndirectModel(It.IsAny<Northwind_dbo_Ten_Most_Expensive_Products_OM>())).Returns(_staticIRModels!.GetHydratedStaticNorthwind_dbo_Ten_Most_Expensive_Products_OM_IR());
		_staticIndirectReferenceTransformers!.Setup(x => x.ToEntity(It.IsAny<Northwind_dbo_Ten_Most_Expensive_Products_OM_IR>())).Returns(_staticEntities!.GetHydratedStaticNorthwind_dbo_Ten_Most_Expensive_Products_OM());
		_dynamicEntities = new Northwind_HydratedDynamicEntities();
		_dynamicIRModels = new Northwind_HydratedDynamicIndirectReferenceTransformerModels();
		_dynamicIndirectReferenceTransformers = new Mock<IIRTransformers>();
		_dynamicIndirectReferenceTransformers!.Setup(x => x.ToIndirectModel(It.IsAny<Northwind_dbo_Ten_Most_Expensive_Products_OM>())).Returns(_dynamicIRModels!.GetHydratedDynamicNorthwind_dbo_Ten_Most_Expensive_Products_OM_IR());
		_dynamicIndirectReferenceTransformers!.Setup(x => x.ToEntity(It.IsAny<Northwind_dbo_Ten_Most_Expensive_Products_OM_IR>())).Returns(_dynamicEntities!.GetHydratedDynamicNorthwind_dbo_Ten_Most_Expensive_Products_OM());
		_staticRepository = new Mock<INorthwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_Repository>();
		_staticRepository!.Setup(x => x.Call_Northwind_dbo_Ten_Most_Expensive_Products()).Returns(Task.FromResult((IEnumerable<Northwind_dbo_Ten_Most_Expensive_Products_OM>?)new List<Northwind_dbo_Ten_Most_Expensive_Products_OM>{_staticEntities!.GetHydratedStaticNorthwind_dbo_Ten_Most_Expensive_Products_OM()}));
		_dynamicRepository = new Mock<INorthwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_Repository>();
		_dynamicRepository!.Setup(x => x.Call_Northwind_dbo_Ten_Most_Expensive_Products()).Returns(Task.FromResult((IEnumerable<Northwind_dbo_Ten_Most_Expensive_Products_OM>?)new List<Northwind_dbo_Ten_Most_Expensive_Products_OM>{_dynamicEntities!.GetHydratedDynamicNorthwind_dbo_Ten_Most_Expensive_Products_OM()}));
		_dynamicRequestHandler = new Northwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_RequestHandler(_logger!.Object, _encryptionDecryptionService!, _dynamicIndirectReferenceTransformers!.Object, _dynamicRepository!.Object);
		_staticRequestHandler = new Northwind_dbo_Ten_Most_Expensive_Products_StoredProcedure_RequestHandler(_logger!.Object, _encryptionDecryptionService!, _staticIndirectReferenceTransformers!.Object, _staticRepository!.Object);
    }
	[TestMethod()]
	public async Task StaticCall_Northwind_dbo_Ten_Most_Expensive_Products_Test()
	{
		// When
		var retData = await _staticRequestHandler!.HandleCall_Northwind_dbo_Ten_Most_Expensive_Products();
		// Then
		Assert.IsTrue(retData != null);
		// TODO: Add test cases
	}
	[TestMethod()]
	public async Task DynamicCall_Northwind_dbo_Ten_Most_Expensive_Products_Test()
	{
		// When
		var retData = await _dynamicRequestHandler!.HandleCall_Northwind_dbo_Ten_Most_Expensive_Products();
		// Then
		Assert.IsTrue(retData != null);
		// TODO: Add test cases
	}
}
