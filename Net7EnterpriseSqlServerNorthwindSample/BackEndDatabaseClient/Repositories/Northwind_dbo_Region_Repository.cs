/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200636 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Enterprise Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use. ****
**** This comment block must not be removed. ****
 */
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Z.EntityFramework.Plus;
using Northwind_BackEndDatabaseClient;
using Northwind_BackEndSqlEntities.Entities;
namespace Northwind_BackEndDatabaseClient.Repositories;
public class Northwind_dbo_Region_Repository : GenericTableRepository<Northwind_dbo_Region>, INorthwind_dbo_Region_Repository
{
    private readonly ILogger<Northwind_dbo_Region_Repository> _logger;    
    public Northwind_dbo_Region_Repository
    (
        ILogger<Northwind_dbo_Region_Repository> logger
        ,Northwind_Context dbContext
    ) : base(dbContext)
    {
        _logger = logger;
    }
	public async Task<IEnumerable<Northwind_dbo_Region>?> GetByRegionID(Int32 regionID_)
	{
		return await _dbContext.Northwind_dbo_Region!
			.Where(x => x.RegionID == regionID_)
			.AsNoTracking()
			.ToListAsync();
	}
	public async Task UpdateByRegionID(Int32 regionID_, Northwind_dbo_Region entity)
	{
		await _dbContext.Northwind_dbo_Region!
			.Where(x => x.RegionID == regionID_)
			.UpdateFromQueryAsync(x => new Northwind_dbo_Region(){ RegionDescription = entity.RegionDescription });
	}
	public async Task DeleteByRegionID(Int32 regionID_)
	{
		await _dbContext.Northwind_dbo_Region!
			.Where(x => x.RegionID == regionID_)
			.DeleteFromQueryAsync();
	}
}
