/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200257 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Free Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use for evaluation purposes only. ****
**** This comment block must not be removed. ****
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Northwind_BackEndDatabaseClient.Repositories;
using Northwind_BackEndSqlEntities.Entities;
namespace Northwind_BackEndCommon.RequestHandlers;
public class Northwind_dbo_Products_RequestHandler : INorthwind_dbo_Products_RequestHandler
{
    private readonly ILogger<Northwind_dbo_Products_RequestHandler> _logger;
    private readonly INorthwind_dbo_Products_Repository _repository;
    public Northwind_dbo_Products_RequestHandler(
    ILogger<Northwind_dbo_Products_RequestHandler> logger
    ,INorthwind_dbo_Products_Repository repository)
    {
        _logger = logger;
        _repository = repository;
    }
	//Main Handlers
	public async Task<IEnumerable<Northwind_dbo_Products>?> HandleGetAll()
	{
		var retData = await _repository.GetAll();
		return retData;
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> HandleGetByCategoryID(Int32? categoryID)
	{
		var retData = await _repository.GetByCategoryID(categoryID);
		return retData;
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> HandleGetByProductID(Int32 productID)
	{
		var retData = await _repository.GetByProductID(productID);
		return retData;
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> HandleGetByProductName(String productName)
	{
		var retData = await _repository.GetByProductName(productName);
		return retData;
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> HandleGetBySupplierID(Int32? supplierID)
	{
		var retData = await _repository.GetBySupplierID(supplierID);
		return retData;
	}
	public async Task<Northwind_dbo_Products?> HandleCreate(Northwind_dbo_Products input)
	{
		var results = await _repository.Create(input);
		return results;
	}
	public async Task HandleUpdateByCategoryID(Int32? categoryID, Northwind_dbo_Products entity)
	{
		await _repository.UpdateByCategoryID(categoryID, entity);
	}
	public async Task HandleUpdateByProductID(Int32 productID, Northwind_dbo_Products entity)
	{
		await _repository.UpdateByProductID(productID, entity);
	}
	public async Task HandleUpdateByProductName(String productName, Northwind_dbo_Products entity)
	{
		await _repository.UpdateByProductName(productName, entity);
	}
	public async Task HandleUpdateBySupplierID(Int32? supplierID, Northwind_dbo_Products entity)
	{
		await _repository.UpdateBySupplierID(supplierID, entity);
	}
	public async Task HandleDeleteByCategoryID(Int32? categoryID)
	{
		await _repository.DeleteByCategoryID(categoryID);
	}
	public async Task HandleDeleteByProductID(Int32 productID)
	{
		await _repository.DeleteByProductID(productID);
	}
	public async Task HandleDeleteByProductName(String productName)
	{
		await _repository.DeleteByProductName(productName);
	}
	public async Task HandleDeleteBySupplierID(Int32? supplierID)
	{
		await _repository.DeleteBySupplierID(supplierID);
	}
}
