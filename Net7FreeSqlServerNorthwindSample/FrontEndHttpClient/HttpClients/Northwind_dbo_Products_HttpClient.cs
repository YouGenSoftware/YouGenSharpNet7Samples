/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200257 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Free Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use for evaluation purposes only. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.WebUtilities;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Northwind_BackEndSqlEntities.Entities;
namespace Northwind_FrontEndHttpClient.HttpClients;
public class Northwind_dbo_Products_HttpClient : HttpClientBase, INorthwind_dbo_Products_HttpClient
{
	public Northwind_dbo_Products_HttpClient(HttpClient httpClient) : base(httpClient)
    {            
    }
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetAll()
	{
		var result = await _httpClient.GetAsync(_httpClient.BaseAddress!.ToString() + "Northwind_dbo_Products/GetAll");
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Products>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetByCategoryID(Int32? categoryID)
	{
		var uri = GetUriForParamsCategoryID("Northwind_dbo_Products/GetByCategoryID", categoryID);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Products>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetByProductID(Int32 productID)
	{
		var uri = GetUriForParamsProductID("Northwind_dbo_Products/GetByProductID", productID);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Products>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetByProductName(String productName)
	{
		var uri = GetUriForParamsProductName("Northwind_dbo_Products/GetByProductName", productName);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Products>?>(content, _jsonSerializationSettings);
	}
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetBySupplierID(Int32? supplierID)
	{
		var uri = GetUriForParamsSupplierID("Northwind_dbo_Products/GetBySupplierID", supplierID);
		var result = await _httpClient.GetAsync(uri);
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<IEnumerable<Northwind_dbo_Products>?>(content, _jsonSerializationSettings);
	}
	public async Task<Northwind_dbo_Products?> Create(Northwind_dbo_Products input)
	{
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PostAsync(_httpClient.BaseAddress!.ToString() + "Northwind_dbo_Products/Create", new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
		var content = await result.Content.ReadAsStringAsync();
		return content == String.Empty ? null : JsonConvert.DeserializeObject<Northwind_dbo_Products?>(content, _jsonSerializationSettings);
	}
	public async Task UpdateByEncodedPrimaryKey(String? encodedPrimaryKey, Northwind_dbo_Products updateModel)
	{
		if (encodedPrimaryKey == null || updateModel == null) return;
		var inputSplits = encodedPrimaryKey.Split((Char)27);
		await UpdateByProductID(Convert.ToInt32(inputSplits[0]), updateModel);
	}
	public async Task UpdateByCategoryID(Int32? categoryID, Northwind_dbo_Products input)
	{
		var uri = GetUriForParamsCategoryID("Northwind_dbo_Products/UpdateByCategoryID", categoryID);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByProductID(Int32 productID, Northwind_dbo_Products input)
	{
		var uri = GetUriForParamsProductID("Northwind_dbo_Products/UpdateByProductID", productID);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateByProductName(String productName, Northwind_dbo_Products input)
	{
		var uri = GetUriForParamsProductName("Northwind_dbo_Products/UpdateByProductName", productName);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task UpdateBySupplierID(Int32? supplierID, Northwind_dbo_Products input)
	{
		var uri = GetUriForParamsSupplierID("Northwind_dbo_Products/UpdateBySupplierID", supplierID);
		var serializedInput = JsonConvert.SerializeObject(input, _jsonSerializationSettings);
		var result = await _httpClient.PutAsync(uri, new StringContent(serializedInput, Encoding.UTF8, "application/json"));
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByEncodedPrimaryKey(String? input)
	{
		if (input == null) return;
		var inputSplits = input.Split((Char)27);
		await DeleteByProductID(Convert.ToInt32(inputSplits[0]));
	}
	public async Task DeleteByCategoryID(Int32? categoryID)
	{
		var uri = GetUriForParamsCategoryID("Northwind_dbo_Products/DeleteByCategoryID", categoryID);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByProductID(Int32 productID)
	{
		var uri = GetUriForParamsProductID("Northwind_dbo_Products/DeleteByProductID", productID);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteByProductName(String productName)
	{
		var uri = GetUriForParamsProductName("Northwind_dbo_Products/DeleteByProductName", productName);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	public async Task DeleteBySupplierID(Int32? supplierID)
	{
		var uri = GetUriForParamsSupplierID("Northwind_dbo_Products/DeleteBySupplierID", supplierID);
		var result = await _httpClient.DeleteAsync(uri);
		result.EnsureSuccessStatusCode();
	}
	private String GetUriForParamsCategoryID(String path, Int32? categoryID)
	{
		var query = new Dictionary<String,String>();
		query["categoryID"] = categoryID.ToString() ?? 0.ToString();
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsProductID(String path, Int32 productID)
	{
		var query = new Dictionary<String,String>();
		query["productID"] = productID.ToString();
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsProductName(String path, String productName)
	{
		var query = new Dictionary<String,String>();
		query["productName"] = productName;
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
	private String GetUriForParamsSupplierID(String path, Int32? supplierID)
	{
		var query = new Dictionary<String,String>();
		query["supplierID"] = supplierID.ToString() ?? 0.ToString();
		return QueryHelpers.AddQueryString(_uriBuilder.Uri.ToString() + path, query);
	}
}
