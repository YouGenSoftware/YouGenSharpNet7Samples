/* **** This file and its contents were generated by YouGen Sharp on (UTC) 20230307200257 on behalf of: ****
**** You Gen Software LLC ****
**** 5961 BeaconPark St ****
**** Lithia Florida 33547 United States of America ****
**** whose account is uniquely identified by: 716881407 ****
**** This file and its contents are subject to the conditions of use for the Free Tier License as specified at: https://www.yougensoft.com/en/conditions-of-use for evaluation purposes only. ****
**** This comment block must not be removed. ****
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Northwind_BackEndSqlEntities.Entities;
using Northwind_BackEndCommon.RequestHandlers;
namespace Northwind_BackEndDatabaseClient.Controllers;
[SwaggerTag(@"Controller Description: N/A")]
[RequireHttps]
public class Northwind_dbo_Products_Controller : ControllerBase
{
	private readonly INorthwind_dbo_Products_RequestHandler _requestHandler;
	public Northwind_dbo_Products_Controller(INorthwind_dbo_Products_RequestHandler requestHandler)
	{
		_requestHandler = requestHandler;
	}
	/// <summary>
	/// Get All records of Products table
	/// </summary>
	[HttpGet, Route("Northwind_dbo_Products/GetAll")]
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetAll()
	{
		return await _requestHandler.HandleGetAll();
	}
	/// <summary>
	/// Get record of Products table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("Northwind_dbo_Products/GetByCategoryID")]
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetByCategoryID(Int32? categoryID)
	{
		return await _requestHandler.HandleGetByCategoryID(categoryID);
	}
	/// <summary>
	/// Get record of Products table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("Northwind_dbo_Products/GetByProductID")]
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetByProductID(Int32 productID)
	{
		return await _requestHandler.HandleGetByProductID(productID);
	}
	/// <summary>
	/// Get record of Products table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("Northwind_dbo_Products/GetByProductName")]
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetByProductName(String productName)
	{
		return await _requestHandler.HandleGetByProductName(productName);
	}
	/// <summary>
	/// Get record of Products table by indexed selector(s)
	/// </summary>
	[HttpGet, Route("Northwind_dbo_Products/GetBySupplierID")]
	public async Task<IEnumerable<Northwind_dbo_Products>?> GetBySupplierID(Int32? supplierID)
	{
		return await _requestHandler.HandleGetBySupplierID(supplierID);
	}
	/// <summary>
	/// Create and return record of Products table
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPost, Route("Northwind_dbo_Products/Create")]
	public async Task<Northwind_dbo_Products?> Create([FromBody]Northwind_dbo_Products input)
	{
		return await _requestHandler.HandleCreate(input);
	}
	/// <summary>
	/// Update record of Products table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("Northwind_dbo_Products/UpdateByCategoryID")]
	public async Task UpdateByCategoryID(Int32? categoryID, [FromBody]Northwind_dbo_Products input)
	{
		await _requestHandler.HandleUpdateByCategoryID(categoryID, input);
	}
	/// <summary>
	/// Update record of Products table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("Northwind_dbo_Products/UpdateByProductID")]
	public async Task UpdateByProductID(Int32 productID, [FromBody]Northwind_dbo_Products input)
	{
		await _requestHandler.HandleUpdateByProductID(productID, input);
	}
	/// <summary>
	/// Update record of Products table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("Northwind_dbo_Products/UpdateByProductName")]
	public async Task UpdateByProductName(String productName, [FromBody]Northwind_dbo_Products input)
	{
		await _requestHandler.HandleUpdateByProductName(productName, input);
	}
	/// <summary>
	/// Update record of Products table by indexed selector(s)
	/// Note: Any foreign key data referenced by or referencing these records should not be included in the body payload
	/// </summary>
	[HttpPut, Route("Northwind_dbo_Products/UpdateBySupplierID")]
	public async Task UpdateBySupplierID(Int32? supplierID, [FromBody]Northwind_dbo_Products input)
	{
		await _requestHandler.HandleUpdateBySupplierID(supplierID, input);
	}
	/// <summary>
	/// Delete record of Products table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("Northwind_dbo_Products/DeleteByCategoryID")]
	public async Task DeleteByCategoryID(Int32? categoryID)
	{
		await _requestHandler.HandleDeleteByCategoryID(categoryID);
	}
	/// <summary>
	/// Delete record of Products table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("Northwind_dbo_Products/DeleteByProductID")]
	public async Task DeleteByProductID(Int32 productID)
	{
		await _requestHandler.HandleDeleteByProductID(productID);
	}
	/// <summary>
	/// Delete record of Products table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("Northwind_dbo_Products/DeleteByProductName")]
	public async Task DeleteByProductName(String productName)
	{
		await _requestHandler.HandleDeleteByProductName(productName);
	}
	/// <summary>
	/// Delete record of Products table by indexed selector(s)
	/// </summary>
	[HttpDelete, Route("Northwind_dbo_Products/DeleteBySupplierID")]
	public async Task DeleteBySupplierID(Int32? supplierID)
	{
		await _requestHandler.HandleDeleteBySupplierID(supplierID);
	}
}
